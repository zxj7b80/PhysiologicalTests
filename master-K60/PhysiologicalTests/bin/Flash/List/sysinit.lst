###############################################################################
#                                                                             #
#                                                       10/Feb/2015  20:14:09 #
# IAR ANSI C/C++ Compiler V6.30.4.23288/W32 EVALUATION for ARM                #
# Copyright 1999-2011 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  E:\单片机\K60\K60核心板源代码\03_LQ_uart_int\src\Sources #
#                    \C\Frame_C\sysinit.c                                     #
#    Command line =  E:\单片机\K60\K60核心板源代码\03_LQ_uart_int\src\Sources #
#                    \C\Frame_C\sysinit.c -D IAR -D TWR_K60N512 -lCN          #
#                    E:\单片机\K60\K60核心板源代码\03_LQ_uart_int\bin\Flash\L #
#                    ist\ -lB E:\单片机\K60\K60核心板源代码\03_LQ_uart_int\bi #
#                    n\Flash\List\ -o E:\单片机\K60\K60核心板源代码\03_LQ_uar #
#                    t_int\bin\Flash\Obj\ --no_cse --no_unroll --no_inline    #
#                    --no_code_motion --no_tbaa --no_clustering               #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M4  #
#                    -e --fpu=None --dlib_config "D:\MyProgramFiles\IAR       #
#                    V6.3\arm\INC\c\DLib_Config_Normal.h" -I                  #
#                    E:\单片机\K60\K60核心板源代码\03_LQ_uart_int\src\Sources #
#                    \H\ -I E:\单片机\K60\K60核心板源代码\03_LQ_uart_int\src\ #
#                    Sources\H\Component_H\ -I E:\单片机\K60\K60核心板源代码\ #
#                    03_LQ_uart_int\src\Sources\H\Frame_H\ -Ol                #
#                    --use_c++_inline                                         #
#    List file    =  E:\单片机\K60\K60核心板源代码\03_LQ_uart_int\bin\Flash\L #
#                    ist\sysinit.lst                                          #
#    Object file  =  E:\单片机\K60\K60核心板源代码\03_LQ_uart_int\bin\Flash\O #
#                    bj\sysinit.o                                             #
#                                                                             #
#                                                                             #
###############################################################################

E:\单片机\K60\K60核心板源代码\03_LQ_uart_int\src\Sources\C\Frame_C\sysinit.c
      1          //-------------------------------------------------------------------------*
      2          // 文件名:sysinit.c                                                        *
      3          // 说  明: 系统配置文件                                                    *
      4          //-------------------------------------------------------------------------*
      5          
      6          #include "sysinit.h"	//头文件
      7          
      8          //全局变量声明

   \                                 In section .bss, align 4
      9          int core_clk_khz;
   \                     core_clk_khz:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     10          int core_clk_mhz;
   \                     core_clk_mhz:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     11          int periph_clk_khz;
   \                     periph_clk_khz:
   \   00000000                      DS8 4
     12          
     13          //-------------------------------------------------------------------------*
     14          //函数名: sysinit                                                          *
     15          //功  能: 系统设置                                                         * 
     16          //参  数: 无						  	           *	
     17          //返  回: 无                                                               *
     18          //说  明: 无                                                               *
     19          //-------------------------------------------------------------------------*

   \                                 In section .text, align 2, keep-with-next
     20          void sysinit (void)
     21          {
   \                     sysinit:
   \   00000000   0xB580             PUSH     {R7,LR}
     22              //使能IO端口时钟    
     23              SIM_SCGC5 |= (SIM_SCGC5_PORTA_MASK
     24                                        | SIM_SCGC5_PORTB_MASK
     25                                        | SIM_SCGC5_PORTC_MASK
     26                                        | SIM_SCGC5_PORTD_MASK
     27                                        | SIM_SCGC5_PORTE_MASK );
   \   00000002   0x....             LDR.N    R0,??DataTable3  ;; 0x40048038
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0xF450 0x5078      ORRS     R0,R0,#0x3E00
   \   0000000A   0x....             LDR.N    R1,??DataTable3  ;; 0x40048038
   \   0000000C   0x6008             STR      R0,[R1, #+0]
     28          
     29              //开启系统时钟
     30              core_clk_mhz = pll_init(CORE_CLK_MHZ, REF_CLK);
   \   0000000E   0x2110             MOVS     R1,#+16
   \   00000010   0x2005             MOVS     R0,#+5
   \   00000012   0x.... 0x....      BL       pll_init
   \   00000016   0x....             LDR.N    R1,??DataTable3_1
   \   00000018   0x6008             STR      R0,[R1, #+0]
     31              //通过pll_init函数的返回值来计算内核时钟和外设时钟
     32              core_clk_khz = core_clk_mhz * 1000;
   \   0000001A   0x....             LDR.N    R0,??DataTable3_1
   \   0000001C   0x6800             LDR      R0,[R0, #+0]
   \   0000001E   0xF44F 0x717A      MOV      R1,#+1000
   \   00000022   0x4348             MULS     R0,R1,R0
   \   00000024   0x....             LDR.N    R1,??DataTable3_2
   \   00000026   0x6008             STR      R0,[R1, #+0]
     33              periph_clk_khz = core_clk_khz / (((SIM_CLKDIV1 & SIM_CLKDIV1_OUTDIV2_MASK) >> 24)+ 1);
   \   00000028   0x....             LDR.N    R0,??DataTable3_2
   \   0000002A   0x6800             LDR      R0,[R0, #+0]
   \   0000002C   0x....             LDR.N    R1,??DataTable3_3  ;; 0x40048044
   \   0000002E   0x6809             LDR      R1,[R1, #+0]
   \   00000030   0xF3C1 0x6103      UBFX     R1,R1,#+24,#+4
   \   00000034   0x1C49             ADDS     R1,R1,#+1
   \   00000036   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   0000003A   0x....             LDR.N    R1,??DataTable3_4
   \   0000003C   0x6008             STR      R0,[R1, #+0]
     34              //使能跟踪时钟，用于调试
     35              trace_clk_init();	
   \   0000003E   0x.... 0x....      BL       trace_clk_init
     36              //FlexBus时钟初始化
     37              fb_clk_init();
   \   00000042   0x.... 0x....      BL       fb_clk_init
     38          
     39          }
   \   00000046   0xBD01             POP      {R0,PC}          ;; return
     40          
     41          //-------------------------------------------------------------------------*
     42          //函数名: trace_clk_init                                                   *
     43          //功  能: 跟踪时钟初始化                                                   * 
     44          //参  数: 无							  	   *	
     45          //返  回: 无                                                               *
     46          //说  明: 用于调试                                                         *
     47          //-------------------------------------------------------------------------*

   \                                 In section .text, align 2, keep-with-next
     48          void trace_clk_init(void)
     49          {
     50              //设置跟踪时钟为内核时钟
     51              SIM_SOPT2 |= SIM_SOPT2_TRACECLKSEL_MASK;	
   \                     trace_clk_init:
   \   00000000   0x....             LDR.N    R0,??DataTable3_5  ;; 0x40048004
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0xF450 0x5080      ORRS     R0,R0,#0x1000
   \   00000008   0x....             LDR.N    R1,??DataTable3_5  ;; 0x40048004
   \   0000000A   0x6008             STR      R0,[R1, #+0]
     52              //在PTA6引脚上使能TRACE_CLKOU功能
     53              PORTA_PCR6 = ( PORT_PCR_MUX(0x7));
   \   0000000C   0x....             LDR.N    R0,??DataTable3_6  ;; 0x40049018
   \   0000000E   0xF44F 0x61E0      MOV      R1,#+1792
   \   00000012   0x6001             STR      R1,[R0, #+0]
     54          }
   \   00000014   0x4770             BX       LR               ;; return
     55          
     56          //-------------------------------------------------------------------------*
     57          //函数名: fb_clk_init                                                      *
     58          //功  能: FlexBus时钟初始化                                                * 
     59          //参  数: 无								   *	
     60          //返  回: 无                                                               *
     61          //说  明:                                                                  *
     62          //-------------------------------------------------------------------------*

   \                                 In section .text, align 2, keep-with-next
     63          void fb_clk_init(void)
     64          {
     65              //使能FlexBus模块时钟
     66              SIM_SCGC7 |= SIM_SCGC7_FLEXBUS_MASK;
   \                     fb_clk_init:
   \   00000000   0x....             LDR.N    R0,??DataTable3_7  ;; 0x40048040
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   00000008   0x....             LDR.N    R1,??DataTable3_7  ;; 0x40048040
   \   0000000A   0x6008             STR      R0,[R1, #+0]
     67              //在PTA6引脚上使能FB_CLKOUT功能
     68              PORTC_PCR3 = ( PORT_PCR_MUX(0x5));
   \   0000000C   0x....             LDR.N    R0,??DataTable3_8  ;; 0x4004b00c
   \   0000000E   0xF44F 0x61A0      MOV      R1,#+1280
   \   00000012   0x6001             STR      R1,[R0, #+0]
     69          }
   \   00000014   0x4770             BX       LR               ;; return
     70          //-------------------------------------------------------------------------*
     71          //函数名: pll_init                                                         *
     72          //功  能: pll初始化                                                        * 
     73          //参  数: clk_option:时钟选项						   * 
     74          //        crystal_val:时钟值                                               *	
     75          //返  回: 时钟频率值                                                       *
     76          //说  明:                                                                  *
     77          //-------------------------------------------------------------------------*

   \                                 In section .text, align 2, keep-with-next
     78          unsigned char pll_init(unsigned char clk_option, unsigned char crystal_val)
     79          {
   \                     pll_init:
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x000A             MOVS     R2,R1
     80              unsigned char pll_freq;
     81              
     82              if (clk_option > 8) {return 0;}   //如果没有选择可用的选项则返回0
   \   00000004   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000006   0x2809             CMP      R0,#+9
   \   00000008   0xD301             BCC.N    ??pll_init_0
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0xE0A4             B.N      ??pll_init_1
     83              if (crystal_val > 16) {return 1;} // 如果可用的晶体选项不可用则返回1
   \                     ??pll_init_0:
   \   0000000E   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000010   0x2A11             CMP      R2,#+17
   \   00000012   0xD301             BCC.N    ??pll_init_2
   \   00000014   0x2001             MOVS     R0,#+1
   \   00000016   0xE09F             B.N      ??pll_init_1
     84              
     85              //这里处在默认的FEI模式
     86              //首先移动到FBE模式
     87              
     88              #if (defined(K60_CLK))   
     89                       MCG_C2 = 0;
   \                     ??pll_init_2:
   \   00000018   0x....             LDR.N    R2,??DataTable3_9  ;; 0x40064001
   \   0000001A   0x2300             MOVS     R3,#+0
   \   0000001C   0x7013             STRB     R3,[R2, #+0]
     90              #else   
     91                       MCG_C2 = MCG_C2_RANGE(2) | MCG_C2_HGO_MASK | MCG_C2_EREFS_MASK;//使能外部晶振
     92              #endif
     93              
     94              //初始化晶振后释放锁定状态的振荡器和GPIO
     95              SIM_SCGC4 |= SIM_SCGC4_LLWU_MASK;
   \   0000001E   0x....             LDR.N    R2,??DataTable3_10  ;; 0x40048034
   \   00000020   0x6812             LDR      R2,[R2, #+0]
   \   00000022   0xF052 0x5280      ORRS     R2,R2,#0x10000000
   \   00000026   0x....             LDR.N    R3,??DataTable3_10  ;; 0x40048034
   \   00000028   0x601A             STR      R2,[R3, #+0]
     96              LLWU_CS |= LLWU_CS_ACKISO_MASK;
   \   0000002A   0x....             LDR.N    R2,??DataTable3_11  ;; 0x4007c008
   \   0000002C   0x7812             LDRB     R2,[R2, #+0]
   \   0000002E   0xF052 0x0280      ORRS     R2,R2,#0x80
   \   00000032   0x....             LDR.N    R3,??DataTable3_11  ;; 0x4007c008
   \   00000034   0x701A             STRB     R2,[R3, #+0]
     97              
     98              //选择外部晶振，参考分频器，清IREFS来启动外部晶振
     99              MCG_C1 = MCG_C1_CLKS(2) | MCG_C1_FRDIV(3);
   \   00000036   0x....             LDR.N    R2,??DataTable3_12  ;; 0x40064000
   \   00000038   0x2398             MOVS     R3,#+152
   \   0000003A   0x7013             STRB     R3,[R2, #+0]
    100              
    101              //等待晶振稳定	
    102              #if (!defined(K60_CLK))
    103              while (!(MCG_S & MCG_S_OSCINIT_MASK)){};  
    104              #endif
    105              
    106              //等待参考时钟状态位清零
    107              while (MCG_S & MCG_S_IREFST_MASK){}; 
   \                     ??pll_init_3:
   \   0000003C   0x....             LDR.N    R2,??DataTable3_13  ;; 0x40064006
   \   0000003E   0x7812             LDRB     R2,[R2, #+0]
   \   00000040   0x06D2             LSLS     R2,R2,#+27
   \   00000042   0xD4FB             BMI.N    ??pll_init_3
    108              //等待时钟状态位显示时钟源来自外部参考时钟
    109              while (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) != 0x2){}; 
   \                     ??pll_init_4:
   \   00000044   0x....             LDR.N    R2,??DataTable3_13  ;; 0x40064006
   \   00000046   0x7812             LDRB     R2,[R2, #+0]
   \   00000048   0xF3C2 0x0281      UBFX     R2,R2,#+2,#+2
   \   0000004C   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000004E   0x2A02             CMP      R2,#+2
   \   00000050   0xD1F8             BNE.N    ??pll_init_4
    110              
    111              //进入FBE模式
    112              
    113              #if (defined(K60_CLK))          //使用外部的50M晶振 
    114            //MCG_C5 = MCG_C5_PRDIV(0x18);    //当然需要25分频，在本函数里没有XTAL50，所以搞了个K60_CLK，表示用了外部的50M
    115            //MCG_C5 = MCG_C5_PRDIV(0x13);    //20分频，50M晶振，2.5M  
    116            //MCG_C5 = MCG_C5_PRDIV(12);      //13分频  3.846M  150M时钟频率使用
    117            //MCG_C5 = MCG_C5_PRDIV(3);       //外部使用的是8M晶振的状况   1:2分频  3:4分频
    118              MCG_C5 = MCG_C5_PRDIV(0x0e);    //180M
   \   00000052   0x....             LDR.N    R2,??DataTable3_14  ;; 0x40064004
   \   00000054   0x230E             MOVS     R3,#+14
   \   00000056   0x7013             STRB     R3,[R2, #+0]
    119            // MCG_C5 = MCG_C5_PRDIV(0x0C);    //207M
    120            //MCG_C5 = MCG_C5_PRDIV(0x0b);    //225M
    121              #else
    122              
    123              //配置PLL分频器来匹配所用的晶振
    124              MCG_C5 = MCG_C5_PRDIV(crystal_val); 
    125              #endif
    126              
    127              //确保MCG_C6处于复位状态，禁止LOLIE、PLL、和时钟控制器，清PLL VCO分频器
    128              MCG_C6 = 0x0;
   \   00000058   0x....             LDR.N    R2,??DataTable3_15  ;; 0x40064005
   \   0000005A   0x2300             MOVS     R3,#+0
   \   0000005C   0x7013             STRB     R3,[R2, #+0]
    129              //选择PLL VCO分频器，系统时钟分频器取决于时钟选项
    130              switch (clk_option) {
   \   0000005E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000060   0x2800             CMP      R0,#+0
   \   00000062   0xD00B             BEQ.N    ??pll_init_5
   \   00000064   0x2802             CMP      R0,#+2
   \   00000066   0xD01F             BEQ.N    ??pll_init_6
   \   00000068   0xD313             BCC.N    ??pll_init_7
   \   0000006A   0x2804             CMP      R0,#+4
   \   0000006C   0xD032             BEQ.N    ??pll_init_8
   \   0000006E   0xD326             BCC.N    ??pll_init_9
   \   00000070   0x2806             CMP      R0,#+6
   \   00000072   0xD045             BEQ.N    ??pll_init_10
   \   00000074   0xD339             BCC.N    ??pll_init_11
   \   00000076   0x2807             CMP      R0,#+7
   \   00000078   0xD04D             BEQ.N    ??pll_init_12
   \   0000007A   0xE056             B.N      ??pll_init_13
    131              case 0:
    132                //设置系统分频器
    133                //MCG=PLL, core = MCG, bus = MCG, FlexBus = MCG, Flash clock= MCG/2
    134                set_sys_dividers(0,0,0,1);
   \                     ??pll_init_5:
   \   0000007C   0x2301             MOVS     R3,#+1
   \   0000007E   0x2200             MOVS     R2,#+0
   \   00000080   0x2100             MOVS     R1,#+0
   \   00000082   0x2000             MOVS     R0,#+0
   \   00000084   0x.... 0x....      BL       set_sys_dividers
    135                //设置VCO分频器，使能PLL为50MHz, LOLIE=0, PLLS=1, CME=0, VDIV=1
    136                MCG_C6 = MCG_C6_PLLS_MASK | MCG_C6_VDIV(1); //VDIV = 1 (x25)
   \   00000088   0x....             LDR.N    R0,??DataTable3_15  ;; 0x40064005
   \   0000008A   0x2141             MOVS     R1,#+65
   \   0000008C   0x7001             STRB     R1,[R0, #+0]
    137                pll_freq = 50;
   \   0000008E   0x2132             MOVS     R1,#+50
    138                break;
   \   00000090   0xE04B             B.N      ??pll_init_13
    139              case 1:
    140                //设置系统分频器
    141                //MCG=PLL, core = MCG, bus = MCG/2, FlexBus = MCG/2, Flash clock= MCG/4
    142                set_sys_dividers(0,1,1,3);
   \                     ??pll_init_7:
   \   00000092   0x2303             MOVS     R3,#+3
   \   00000094   0x2201             MOVS     R2,#+1
   \   00000096   0x2101             MOVS     R1,#+1
   \   00000098   0x2000             MOVS     R0,#+0
   \   0000009A   0x.... 0x....      BL       set_sys_dividers
    143                //设置VCO分频器，使能PLL为100MHz, LOLIE=0, PLLS=1, CME=0, VDIV=26
    144                MCG_C6 = MCG_C6_PLLS_MASK | MCG_C6_VDIV(26); //VDIV = 26 (x50)
   \   0000009E   0x....             LDR.N    R0,??DataTable3_15  ;; 0x40064005
   \   000000A0   0x215A             MOVS     R1,#+90
   \   000000A2   0x7001             STRB     R1,[R0, #+0]
    145                pll_freq = 100;
   \   000000A4   0x2164             MOVS     R1,#+100
    146                break;
   \   000000A6   0xE040             B.N      ??pll_init_13
    147              case 2:
    148                //设置系统分频器
    149                //MCG=PLL, core = MCG, bus = MCG/2, FlexBus = MCG/2, Flash clock= MCG/4
    150                set_sys_dividers(0,1,1,3);
   \                     ??pll_init_6:
   \   000000A8   0x2303             MOVS     R3,#+3
   \   000000AA   0x2201             MOVS     R2,#+1
   \   000000AC   0x2101             MOVS     R1,#+1
   \   000000AE   0x2000             MOVS     R0,#+0
   \   000000B0   0x.... 0x....      BL       set_sys_dividers
    151                //设置VCO分频器，使能PLL为96MHz, LOLIE=0, PLLS=1, CME=0, VDIV=24
    152                MCG_C6 = MCG_C6_PLLS_MASK | MCG_C6_VDIV(24); //VDIV = 24 (x48)
   \   000000B4   0x....             LDR.N    R0,??DataTable3_15  ;; 0x40064005
   \   000000B6   0x2158             MOVS     R1,#+88
   \   000000B8   0x7001             STRB     R1,[R0, #+0]
    153                pll_freq =120;
   \   000000BA   0x2178             MOVS     R1,#+120
    154                break;
   \   000000BC   0xE035             B.N      ??pll_init_13
    155              case 3:
    156                //设置系统分频器
    157                //MCG=PLL, core = MCG, bus = MCG, FlexBus = MCG, Flash clock= MCG/2
    158                set_sys_dividers(0,0,0,1);
   \                     ??pll_init_9:
   \   000000BE   0x2301             MOVS     R3,#+1
   \   000000C0   0x2200             MOVS     R2,#+0
   \   000000C2   0x2100             MOVS     R1,#+0
   \   000000C4   0x2000             MOVS     R0,#+0
   \   000000C6   0x.... 0x....      BL       set_sys_dividers
    159                //设置VCO分频器，使能PLL为48MHz, LOLIE=0, PLLS=1, CME=0, VDIV=0
    160                MCG_C6 = MCG_C6_PLLS_MASK; //VDIV = 0 (x24)
   \   000000CA   0x....             LDR.N    R0,??DataTable3_15  ;; 0x40064005
   \   000000CC   0x2140             MOVS     R1,#+64
   \   000000CE   0x7001             STRB     R1,[R0, #+0]
    161                pll_freq = 48;
   \   000000D0   0x2130             MOVS     R1,#+48
    162                break;
   \   000000D2   0xE02A             B.N      ??pll_init_13
    163              case 4:
    164                set_sys_dividers(0,2,2,5);  //core=150M, bus=50M, FlexBus=50M, Flash Clk=25M
   \                     ??pll_init_8:
   \   000000D4   0x2305             MOVS     R3,#+5
   \   000000D6   0x2202             MOVS     R2,#+2
   \   000000D8   0x2102             MOVS     R1,#+2
   \   000000DA   0x2000             MOVS     R0,#+0
   \   000000DC   0x.... 0x....      BL       set_sys_dividers
    165                MCG_C6 = MCG_C6_PLLS_MASK | MCG_C6_VDIV(15); //VDIV = 15 (3.846x39) 150MHz
   \   000000E0   0x....             LDR.N    R0,??DataTable3_15  ;; 0x40064005
   \   000000E2   0x214F             MOVS     R1,#+79
   \   000000E4   0x7001             STRB     R1,[R0, #+0]
    166                pll_freq = 150;
   \   000000E6   0x2196             MOVS     R1,#+150
    167                break;
   \   000000E8   0xE01F             B.N      ??pll_init_13
    168              case 5:
    169                set_sys_dividers(0,2,2,7);  //core=180M, bus=60M, FlexBus=60M, Flash Clk=30M
   \                     ??pll_init_11:
   \   000000EA   0x2307             MOVS     R3,#+7
   \   000000EC   0x2202             MOVS     R2,#+2
   \   000000EE   0x2102             MOVS     R1,#+2
   \   000000F0   0x2000             MOVS     R0,#+0
   \   000000F2   0x.... 0x....      BL       set_sys_dividers
    170                MCG_C6 = MCG_C6_PLLS_MASK | MCG_C6_VDIV(30); //VDIV = 15 (3.846x39) 150MHz
   \   000000F6   0x....             LDR.N    R0,??DataTable3_15  ;; 0x40064005
   \   000000F8   0x215E             MOVS     R1,#+94
   \   000000FA   0x7001             STRB     R1,[R0, #+0]
    171                pll_freq = 180;
   \   000000FC   0x21B4             MOVS     R1,#+180
    172                break;
   \   000000FE   0xE014             B.N      ??pll_init_13
    173              case 6:
    174                set_sys_dividers(0,2,2,7);  //core=180M, bus=60M, FlexBus=60M, Flash Clk=30M
   \                     ??pll_init_10:
   \   00000100   0x2307             MOVS     R3,#+7
   \   00000102   0x2202             MOVS     R2,#+2
   \   00000104   0x2102             MOVS     R1,#+2
   \   00000106   0x2000             MOVS     R0,#+0
   \   00000108   0x.... 0x....      BL       set_sys_dividers
    175                MCG_C6 = MCG_C6_PLLS_MASK | MCG_C6_VDIV(30); //VDIV = 15 (3.846x39) 150MHz
   \   0000010C   0x....             LDR.N    R0,??DataTable3_15  ;; 0x40064005
   \   0000010E   0x215E             MOVS     R1,#+94
   \   00000110   0x7001             STRB     R1,[R0, #+0]
    176                pll_freq = 207;
   \   00000112   0x21CF             MOVS     R1,#+207
    177                break;
   \   00000114   0xE009             B.N      ??pll_init_13
    178              case 7:
    179                set_sys_dividers(0,2,2,8);  //core=180M, bus=60M, FlexBus=60M, Flash Clk=30M
   \                     ??pll_init_12:
   \   00000116   0x2308             MOVS     R3,#+8
   \   00000118   0x2202             MOVS     R2,#+2
   \   0000011A   0x2102             MOVS     R1,#+2
   \   0000011C   0x2000             MOVS     R0,#+0
   \   0000011E   0x.... 0x....      BL       set_sys_dividers
    180                MCG_C6 = MCG_C6_PLLS_MASK | MCG_C6_VDIV(30); //VDIV = 15 (3.846x39) 150MHz
   \   00000122   0x....             LDR.N    R0,??DataTable3_15  ;; 0x40064005
   \   00000124   0x215E             MOVS     R1,#+94
   \   00000126   0x7001             STRB     R1,[R0, #+0]
    181                pll_freq = 225;
   \   00000128   0x21E1             MOVS     R1,#+225
    182                break;
    183              }
    184              while (!(MCG_S & MCG_S_PLLST_MASK)){}; // wait for PLL status bit to set
   \                     ??pll_init_13:
   \   0000012A   0x....             LDR.N    R0,??DataTable3_13  ;; 0x40064006
   \   0000012C   0x7800             LDRB     R0,[R0, #+0]
   \   0000012E   0x0680             LSLS     R0,R0,#+26
   \   00000130   0xD5FB             BPL.N    ??pll_init_13
    185              
    186              while (!(MCG_S & MCG_S_LOCK_MASK)){}; // Wait for LOCK bit to set
   \                     ??pll_init_14:
   \   00000132   0x....             LDR.N    R0,??DataTable3_13  ;; 0x40064006
   \   00000134   0x7800             LDRB     R0,[R0, #+0]
   \   00000136   0x0640             LSLS     R0,R0,#+25
   \   00000138   0xD5FB             BPL.N    ??pll_init_14
    187              
    188              //进入PBE模式
    189              
    190              //通过清零CLKS位来进入PEE模式
    191              // CLKS=0, FRDIV=3, IREFS=0, IRCLKEN=0, IREFSTEN=0
    192              MCG_C1 &= ~MCG_C1_CLKS_MASK;
   \   0000013A   0x....             LDR.N    R0,??DataTable3_12  ;; 0x40064000
   \   0000013C   0x7800             LDRB     R0,[R0, #+0]
   \   0000013E   0xF010 0x003F      ANDS     R0,R0,#0x3F
   \   00000142   0x....             LDR.N    R2,??DataTable3_12  ;; 0x40064000
   \   00000144   0x7010             STRB     R0,[R2, #+0]
    193              
    194              //等待时钟状态位更新
    195              while (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) != 0x3){};
   \                     ??pll_init_15:
   \   00000146   0x....             LDR.N    R0,??DataTable3_13  ;; 0x40064006
   \   00000148   0x7800             LDRB     R0,[R0, #+0]
   \   0000014A   0xF3C0 0x0081      UBFX     R0,R0,#+2,#+2
   \   0000014E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000150   0x2803             CMP      R0,#+3
   \   00000152   0xD1F8             BNE.N    ??pll_init_15
    196              
    197              //开始进入PEE模式
    198              
    199              return pll_freq;
   \   00000154   0x0008             MOVS     R0,R1
   \   00000156   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \                     ??pll_init_1:
   \   00000158   0xBD02             POP      {R1,PC}          ;; return
    200          }
    201          
    202          //-------------------------------------------------------------------------*
    203          //函数名: set_sys_dividers                                                 *
    204          //功  能: 设置系系统分频器                                                 * 
    205          //参  数: 预分频值   							   *	
    206          //返  回: 无                                                               *
    207          //说  明: 此函数必须放在RAM里执行，否则会产生错误e2448。当FLASH时钟分频改变* 
    208          //        时，必须禁止FLASH的预取功能。在时钟分频改变之后，必须延时一小段时*
    209          //	 间才可以从新使能预取功能。                                        * 
    210          //-------------------------------------------------------------------------*

   \                                 In section .textrw, align 4, keep-with-next
    211          __ramfunc void set_sys_dividers(uint32 outdiv1, uint32 outdiv2, uint32 outdiv3, uint32 outdiv4)
    212          {
   \                     set_sys_dividers:
   \   00000000   0xB470             PUSH     {R4-R6}
    213              uint32 temp_reg;
    214              uint8 i;
    215              //保存FMC_PFAPR当前的值
    216              temp_reg = FMC_PFAPR;
   \   00000002   0x4C10             LDR.N    R4,??set_sys_dividers_0  ;; 0x4001f000
   \   00000004   0x6824             LDR      R4,[R4, #+0]
    217              
    218              //通过M&PFD置位M0PFD来禁止预取功能
    219              FMC_PFAPR |= FMC_PFAPR_M7PFD_MASK | FMC_PFAPR_M6PFD_MASK | FMC_PFAPR_M5PFD_MASK
    220                               | FMC_PFAPR_M4PFD_MASK | FMC_PFAPR_M3PFD_MASK | FMC_PFAPR_M2PFD_MASK
    221                               | FMC_PFAPR_M1PFD_MASK | FMC_PFAPR_M0PFD_MASK;
   \   00000006   0x4D0F             LDR.N    R5,??set_sys_dividers_0  ;; 0x4001f000
   \   00000008   0x682D             LDR      R5,[R5, #+0]
   \   0000000A   0xF455 0x057F      ORRS     R5,R5,#0xFF0000
   \   0000000E   0x4E0D             LDR.N    R6,??set_sys_dividers_0  ;; 0x4001f000
   \   00000010   0x6035             STR      R5,[R6, #+0]
    222              
    223              //给时钟分频器设置期望值  
    224              SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(outdiv1) | SIM_CLKDIV1_OUTDIV2(outdiv2) 
    225                                | SIM_CLKDIV1_OUTDIV3(outdiv3) | SIM_CLKDIV1_OUTDIV4(outdiv4);
   \   00000012   0x0609             LSLS     R1,R1,#+24
   \   00000014   0xF011 0x6170      ANDS     R1,R1,#0xF000000
   \   00000018   0xEA51 0x7000      ORRS     R0,R1,R0, LSL #+28
   \   0000001C   0x0511             LSLS     R1,R2,#+20
   \   0000001E   0xF411 0x0170      ANDS     R1,R1,#0xF00000
   \   00000022   0x4308             ORRS     R0,R1,R0
   \   00000024   0x0419             LSLS     R1,R3,#+16
   \   00000026   0xF411 0x2170      ANDS     R1,R1,#0xF0000
   \   0000002A   0x4308             ORRS     R0,R1,R0
   \   0000002C   0x4906             LDR.N    R1,??set_sys_dividers_0+0x4  ;; 0x40048044
   \   0000002E   0x6008             STR      R0,[R1, #+0]
    226              
    227              //等待分频器改变
    228              for (i = 0 ; i < outdiv4 ; i++)
   \   00000030   0x2000             MOVS     R0,#+0
   \   00000032   0xE000             B.N      ??set_sys_dividers_1
   \                     ??set_sys_dividers_2:
   \   00000034   0x1C40             ADDS     R0,R0,#+1
   \                     ??set_sys_dividers_1:
   \   00000036   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000038   0x4298             CMP      R0,R3
   \   0000003A   0xD3FB             BCC.N    ??set_sys_dividers_2
    229              {}
    230              
    231              //从新存FMC_PFAPR的原始值
    232              FMC_PFAPR = temp_reg; 
   \   0000003C   0x4801             LDR.N    R0,??set_sys_dividers_0  ;; 0x4001f000
   \   0000003E   0x6004             STR      R4,[R0, #+0]
    233              
    234              return;
   \   00000040   0xBC70             POP      {R4-R6}
   \   00000042   0x4770             BX       LR               ;; return
   \                     ??set_sys_dividers_0:
   \   00000044   0x4001F000         DC32     0x4001f000
   \   00000048   0x40048044         DC32     0x40048044
    235          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x40048038         DC32     0x40048038

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0x........         DC32     core_clk_mhz

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   0x........         DC32     core_clk_khz

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \   00000000   0x40048044         DC32     0x40048044

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \   00000000   0x........         DC32     periph_clk_khz

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_5:
   \   00000000   0x40048004         DC32     0x40048004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_6:
   \   00000000   0x40049018         DC32     0x40049018

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_7:
   \   00000000   0x40048040         DC32     0x40048040

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_8:
   \   00000000   0x4004B00C         DC32     0x4004b00c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_9:
   \   00000000   0x40064001         DC32     0x40064001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_10:
   \   00000000   0x40048034         DC32     0x40048034

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_11:
   \   00000000   0x4007C008         DC32     0x4007c008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_12:
   \   00000000   0x40064000         DC32     0x40064000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_13:
   \   00000000   0x40064006         DC32     0x40064006

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_14:
   \   00000000   0x40064004         DC32     0x40064004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_15:
   \   00000000   0x40064005         DC32     0x40064005
    236          
    237          
    238          
    239          
    240          
    241          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        0  fb_clk_init
        8  pll_init
             8 -> set_sys_dividers
       12  set_sys_dividers
        8  sysinit
             8 -> fb_clk_init
             8 -> pll_init
             8 -> trace_clk_init
        0  trace_clk_init


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_10
       4  ??DataTable3_11
       4  ??DataTable3_12
       4  ??DataTable3_13
       4  ??DataTable3_14
       4  ??DataTable3_15
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
       4  ??DataTable3_5
       4  ??DataTable3_6
       4  ??DataTable3_7
       4  ??DataTable3_8
       4  ??DataTable3_9
       4  core_clk_khz
       4  core_clk_mhz
      22  fb_clk_init
       4  periph_clk_khz
     346  pll_init
      76  set_sys_dividers
      72  sysinit
      22  trace_clk_init

 
  12 bytes in section .bss
 526 bytes in section .text
  76 bytes in section .textrw
 
 602 bytes of CODE memory
  12 bytes of DATA memory

Errors: none
Warnings: none
