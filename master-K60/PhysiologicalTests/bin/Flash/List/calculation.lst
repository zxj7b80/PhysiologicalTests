###############################################################################
#                                                                             #
#                                                       10/Feb/2015  19:51:52 #
# IAR ANSI C/C++ Compiler V6.30.4.23288/W32 EVALUATION for ARM                #
# Copyright 1999-2011 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  E:\单片机\K60\K60核心板源代码\03_LQ_uart_int\src\Sources #
#                    \C\Component_C\calculation.c                             #
#    Command line =  E:\单片机\K60\K60核心板源代码\03_LQ_uart_int\src\Sources #
#                    \C\Component_C\calculation.c -D IAR -D TWR_K60N512 -lCN  #
#                    E:\单片机\K60\K60核心板源代码\03_LQ_uart_int\bin\Flash\L #
#                    ist\ -lB E:\单片机\K60\K60核心板源代码\03_LQ_uart_int\bi #
#                    n\Flash\List\ -o E:\单片机\K60\K60核心板源代码\03_LQ_uar #
#                    t_int\bin\Flash\Obj\ --no_cse --no_unroll --no_inline    #
#                    --no_code_motion --no_tbaa --no_clustering               #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M4  #
#                    -e --fpu=None --dlib_config "D:\MyProgramFiles\IAR       #
#                    V6.3\arm\INC\c\DLib_Config_Normal.h" -I                  #
#                    E:\单片机\K60\K60核心板源代码\03_LQ_uart_int\src\Sources #
#                    \H\ -I E:\单片机\K60\K60核心板源代码\03_LQ_uart_int\src\ #
#                    Sources\H\Component_H\ -I E:\单片机\K60\K60核心板源代码\ #
#                    03_LQ_uart_int\src\Sources\H\Frame_H\ -Ol                #
#                    --use_c++_inline                                         #
#    List file    =  E:\单片机\K60\K60核心板源代码\03_LQ_uart_int\bin\Flash\L #
#                    ist\calculation.lst                                      #
#    Object file  =  E:\单片机\K60\K60核心板源代码\03_LQ_uart_int\bin\Flash\O #
#                    bj\calculation.o                                         #
#                                                                             #
#                                                                             #
###############################################################################

E:\单片机\K60\K60核心板源代码\03_LQ_uart_int\src\Sources\C\Component_C\calculation.c
      1          
      2          #include "includes.h"
      3          
      4          /************************************************************************
      5          *                             蓝宙电子工作室
      6          *
      7          *  函数名称：CCD_init
      8          *  功能说明：CCD初始化
      9          *  参数说明：
     10          *  函数返回：无
     11          *  修改时间：2012-10-20
     12          *  备    注：
     13          *************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     14          void CCD_init(void)
     15          {
   \                     CCD_init:
   \   00000000   0xB580             PUSH     {R7,LR}
     16            gpio_init (PORTE , 0, 1,1);
   \   00000002   0x2301             MOVS     R3,#+1
   \   00000004   0x2201             MOVS     R2,#+1
   \   00000006   0x2100             MOVS     R1,#+0
   \   00000008   0x....             LDR.N    R0,??DataTable3  ;; 0x400ff100
   \   0000000A   0x.... 0x....      BL       gpio_init
     17            gpio_init (PORTE , 1, 1,1);
   \   0000000E   0x2301             MOVS     R3,#+1
   \   00000010   0x2201             MOVS     R2,#+1
   \   00000012   0x2101             MOVS     R1,#+1
   \   00000014   0x....             LDR.N    R0,??DataTable3  ;; 0x400ff100
   \   00000016   0x.... 0x....      BL       gpio_init
     18            hw_adc_init(1) ;
   \   0000001A   0x2001             MOVS     R0,#+1
   \   0000001C   0x.... 0x....      BL       hw_adc_init
     19            
     20          }
   \   00000020   0xBD01             POP      {R0,PC}          ;; return
     21          
     22          /*************************************************************************
     23          *                           蓝宙电子工作室
     24          *
     25          *  函数名称：StartIntegration
     26          *  功能说明：CCD启动程序
     27          *  参数说明：
     28          *  函数返回：无
     29          *  修改时间：2012-10-20
     30          *  备    注：
     31          *************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     32          void StartIntegration(void) 
     33          {
   \                     StartIntegration:
   \   00000000   0xB510             PUSH     {R4,LR}
     34          
     35              unsigned char i;
     36          
     37              SI_SetVal();            /* SI  = 1 */
   \   00000002   0x.... 0x....      BL       SI_SetVal
     38              SamplingDelay();
   \   00000006   0x.... 0x....      BL       SamplingDelay
     39              CLK_SetVal();           /* CLK = 1 */
   \   0000000A   0x.... 0x....      BL       CLK_SetVal
     40              SamplingDelay();
   \   0000000E   0x.... 0x....      BL       SamplingDelay
     41              SI_ClrVal();            /* SI  = 0 */
   \   00000012   0x.... 0x....      BL       SI_ClrVal
     42              SamplingDelay();
   \   00000016   0x.... 0x....      BL       SamplingDelay
     43              CLK_ClrVal();           /* CLK = 0 */
   \   0000001A   0x.... 0x....      BL       CLK_ClrVal
     44          
     45              for(i=0; i<127; i++) 
   \   0000001E   0x2400             MOVS     R4,#+0
   \   00000020   0xE00C             B.N      ??StartIntegration_0
     46              {
     47                  SamplingDelay();
   \                     ??StartIntegration_1:
   \   00000022   0x.... 0x....      BL       SamplingDelay
     48                  SamplingDelay();
   \   00000026   0x.... 0x....      BL       SamplingDelay
     49                  CLK_SetVal();       /* CLK = 1 */
   \   0000002A   0x.... 0x....      BL       CLK_SetVal
     50                  SamplingDelay();
   \   0000002E   0x.... 0x....      BL       SamplingDelay
     51                  SamplingDelay();
   \   00000032   0x.... 0x....      BL       SamplingDelay
     52                  CLK_ClrVal();       /* CLK = 0 */
   \   00000036   0x.... 0x....      BL       CLK_ClrVal
     53              }
   \   0000003A   0x1C64             ADDS     R4,R4,#+1
   \                     ??StartIntegration_0:
   \   0000003C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000003E   0x2C7F             CMP      R4,#+127
   \   00000040   0xD3EF             BCC.N    ??StartIntegration_1
     54              SamplingDelay();
   \   00000042   0x.... 0x....      BL       SamplingDelay
     55              SamplingDelay();
   \   00000046   0x.... 0x....      BL       SamplingDelay
     56              CLK_SetVal();           /* CLK = 1 */
   \   0000004A   0x.... 0x....      BL       CLK_SetVal
     57              SamplingDelay();
   \   0000004E   0x.... 0x....      BL       SamplingDelay
     58              SamplingDelay();
   \   00000052   0x.... 0x....      BL       SamplingDelay
     59              CLK_ClrVal();           /* CLK = 0 */
   \   00000056   0x.... 0x....      BL       CLK_ClrVal
     60          }
   \   0000005A   0xBD10             POP      {R4,PC}          ;; return
     61          
     62          
     63          

   \                                 In section .text, align 2, keep-with-next
     64          void ImageCapture(unsigned char * ImageData)        //*ImageData =  ad_once(ADC1, AD6a, ADC_8bit);
     65          {
   \                     ImageCapture:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
     66          
     67              unsigned char i;
     68              extern uint8 AtemP ;
     69          
     70              SI_SetVal();            /* SI  = 1 */
   \   00000004   0x.... 0x....      BL       SI_SetVal
     71              SamplingDelay();
   \   00000008   0x.... 0x....      BL       SamplingDelay
     72              CLK_SetVal();           /* CLK = 1 */
   \   0000000C   0x.... 0x....      BL       CLK_SetVal
     73              SamplingDelay();
   \   00000010   0x.... 0x....      BL       SamplingDelay
     74              SI_ClrVal();            /* SI  = 0 */
   \   00000014   0x.... 0x....      BL       SI_ClrVal
     75              SamplingDelay();
   \   00000018   0x.... 0x....      BL       SamplingDelay
     76          
     77             
     78          //Delay 10us for sample the first pixel
     79              for(i = 0; i < 50; i++) 
   \   0000001C   0x2500             MOVS     R5,#+0
   \   0000001E   0xE002             B.N      ??ImageCapture_0
     80              {
     81                SamplingDelay() ;  //200ns
   \                     ??ImageCapture_1:
   \   00000020   0x.... 0x....      BL       SamplingDelay
     82              }
   \   00000024   0x1C6D             ADDS     R5,R5,#+1
   \                     ??ImageCapture_0:
   \   00000026   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000028   0x2D32             CMP      R5,#+50
   \   0000002A   0xD3F9             BCC.N    ??ImageCapture_1
     83          
     84          
     85          //Sampling Pixel 1
     86              *ImageData =  hw_ad_once(1, 6, 8);
   \   0000002C   0x2208             MOVS     R2,#+8
   \   0000002E   0x2106             MOVS     R1,#+6
   \   00000030   0x2001             MOVS     R0,#+1
   \   00000032   0x.... 0x....      BL       hw_ad_once
   \   00000036   0x7020             STRB     R0,[R4, #+0]
     87              ImageData ++ ;
   \   00000038   0x1C64             ADDS     R4,R4,#+1
     88              CLK_ClrVal();           /* CLK = 0 */
   \   0000003A   0x.... 0x....      BL       CLK_ClrVal
     89          
     90              for(i=0; i<127; i++) 
   \   0000003E   0x2500             MOVS     R5,#+0
   \   00000040   0xE013             B.N      ??ImageCapture_2
     91              {
     92                  SamplingDelay();
   \                     ??ImageCapture_3:
   \   00000042   0x.... 0x....      BL       SamplingDelay
     93                  SamplingDelay();
   \   00000046   0x.... 0x....      BL       SamplingDelay
     94                  CLK_SetVal();       /* CLK = 1 */
   \   0000004A   0x.... 0x....      BL       CLK_SetVal
     95                  SamplingDelay();
   \   0000004E   0x.... 0x....      BL       SamplingDelay
     96                  SamplingDelay();
   \   00000052   0x.... 0x....      BL       SamplingDelay
     97                  //Sampling Pixel 2~128
     98          
     99                 *ImageData =  hw_ad_once(1, 6, 8);
   \   00000056   0x2208             MOVS     R2,#+8
   \   00000058   0x2106             MOVS     R1,#+6
   \   0000005A   0x2001             MOVS     R0,#+1
   \   0000005C   0x.... 0x....      BL       hw_ad_once
   \   00000060   0x7020             STRB     R0,[R4, #+0]
    100                  ImageData ++ ;
   \   00000062   0x1C64             ADDS     R4,R4,#+1
    101                  CLK_ClrVal();       /* CLK = 0 */
   \   00000064   0x.... 0x....      BL       CLK_ClrVal
    102              }
   \   00000068   0x1C6D             ADDS     R5,R5,#+1
   \                     ??ImageCapture_2:
   \   0000006A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000006C   0x2D7F             CMP      R5,#+127
   \   0000006E   0xD3E8             BCC.N    ??ImageCapture_3
    103              SamplingDelay();
   \   00000070   0x.... 0x....      BL       SamplingDelay
    104              SamplingDelay();
   \   00000074   0x.... 0x....      BL       SamplingDelay
    105              CLK_SetVal();           /* CLK = 1 */
   \   00000078   0x.... 0x....      BL       CLK_SetVal
    106              SamplingDelay();
   \   0000007C   0x.... 0x....      BL       SamplingDelay
    107              SamplingDelay();
   \   00000080   0x.... 0x....      BL       SamplingDelay
    108              CLK_ClrVal();           /* CLK = 0 */
   \   00000084   0x.... 0x....      BL       CLK_ClrVal
    109          }
   \   00000088   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    110          
    111          /*************************************************************************
    112          *                           蓝宙电子工作室
    113          *
    114          *  函数名称：CalculateIntegrationTime
    115          *  功能说明：计算曝光时间
    116          *  参数说明：
    117          *  函数返回：无
    118          *  修改时间：2012-10-20
    119          *  备    注：
    120          *************************************************************************/
    121          extern uint8 Pixel[128];
    122          

   \                                 In section .bss, align 1
    123          uint8 PixelAverageValue;/* 128个像素点的平均AD值 */
   \                     PixelAverageValue:
   \   00000000                      DS8 1
    124          

   \                                 In section .bss, align 1
    125          uint8 PixelAverageVoltage;/* 128个像素点的平均电压值的10倍 */
   \                     PixelAverageVoltage:
   \   00000000                      DS8 1
    126          
    127          

   \                                 In section .data, align 2
    128          int16 TargetPixelAverageVoltage = 30;/* 设定目标平均电压值，实际电压的10倍 */
   \                     TargetPixelAverageVoltage:
   \   00000000   0x001E             DC16 30
    129          

   \                                 In section .bss, align 2
    130          int16 PixelAverageVoltageError = 0;/* 设定目标平均电压值与实际值的偏差，实际电压的10倍 */
   \                     PixelAverageVoltageError:
   \   00000000                      DS8 2
    131          

   \                                 In section .data, align 2
    132          int16 TargetPixelAverageVoltageAllowError = 2;/* 设定目标平均电压值允许的偏差，实际电压的10倍 */
   \                     TargetPixelAverageVoltageAllowError:
   \   00000000   0x0002             DC16 2
    133          

   \                                 In section .data, align 1
    134          uint8 IntegrationTime = 10;/* 曝光时间，单位ms */
   \                     IntegrationTime:
   \   00000000   0x0A               DC8 10
    135          
    136          

   \                                 In section .text, align 2, keep-with-next
    137          void CalculateIntegrationTime(void) 
    138          {
   \                     CalculateIntegrationTime:
   \   00000000   0xB580             PUSH     {R7,LR}
    139          
    140              PixelAverageValue = PixelAverage(128,Pixel);/* 计算128个像素点的平均AD值 */
   \   00000002   0x....             LDR.N    R1,??DataTable3_1
   \   00000004   0x2080             MOVS     R0,#+128
   \   00000006   0x.... 0x....      BL       PixelAverage
   \   0000000A   0x....             LDR.N    R1,??DataTable3_2
   \   0000000C   0x7008             STRB     R0,[R1, #+0]
    141              
    142             
    143              PixelAverageVoltage = (unsigned char)((int)PixelAverageValue * 25 / 128); /* 计算128个像素点的平均电压值,实际值的10倍 */
   \   0000000E   0x....             LDR.N    R0,??DataTable3_2
   \   00000010   0x7800             LDRB     R0,[R0, #+0]
   \   00000012   0x2119             MOVS     R1,#+25
   \   00000014   0x4348             MULS     R0,R1,R0
   \   00000016   0x2180             MOVS     R1,#+128
   \   00000018   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   0000001C   0x....             LDR.N    R1,??DataTable3_3
   \   0000001E   0x7008             STRB     R0,[R1, #+0]
    144          
    145              PixelAverageVoltageError = TargetPixelAverageVoltage - PixelAverageVoltage;
   \   00000020   0x....             LDR.N    R0,??DataTable3_4
   \   00000022   0x8800             LDRH     R0,[R0, #+0]
   \   00000024   0x....             LDR.N    R1,??DataTable3_3
   \   00000026   0x7809             LDRB     R1,[R1, #+0]
   \   00000028   0x1A40             SUBS     R0,R0,R1
   \   0000002A   0x....             LDR.N    R1,??DataTable3_5
   \   0000002C   0x8008             STRH     R0,[R1, #+0]
    146              if(PixelAverageVoltageError < -TargetPixelAverageVoltageAllowError)
   \   0000002E   0x....             LDR.N    R0,??DataTable3_5
   \   00000030   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   00000034   0x....             LDR.N    R1,??DataTable3_6
   \   00000036   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \   0000003A   0x42C8             CMN      R0,R1
   \   0000003C   0xDA04             BGE.N    ??CalculateIntegrationTime_0
    147                  IntegrationTime--;//曝光时间看什么
   \   0000003E   0x....             LDR.N    R0,??DataTable3_7
   \   00000040   0x7800             LDRB     R0,[R0, #+0]
   \   00000042   0x1E40             SUBS     R0,R0,#+1
   \   00000044   0x....             LDR.N    R1,??DataTable3_7
   \   00000046   0x7008             STRB     R0,[R1, #+0]
    148              if(PixelAverageVoltageError > TargetPixelAverageVoltageAllowError)
   \                     ??CalculateIntegrationTime_0:
   \   00000048   0x....             LDR.N    R0,??DataTable3_6
   \   0000004A   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   0000004E   0x....             LDR.N    R1,??DataTable3_5
   \   00000050   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \   00000054   0x4288             CMP      R0,R1
   \   00000056   0xDA04             BGE.N    ??CalculateIntegrationTime_1
    149                  IntegrationTime++;
   \   00000058   0x....             LDR.N    R0,??DataTable3_7
   \   0000005A   0x7800             LDRB     R0,[R0, #+0]
   \   0000005C   0x1C40             ADDS     R0,R0,#+1
   \   0000005E   0x....             LDR.N    R1,??DataTable3_7
   \   00000060   0x7008             STRB     R0,[R1, #+0]
    150              if(IntegrationTime <= 1)
   \                     ??CalculateIntegrationTime_1:
   \   00000062   0x....             LDR.N    R0,??DataTable3_7
   \   00000064   0x7800             LDRB     R0,[R0, #+0]
   \   00000066   0x2802             CMP      R0,#+2
   \   00000068   0xD202             BCS.N    ??CalculateIntegrationTime_2
    151                  IntegrationTime = 1;
   \   0000006A   0x....             LDR.N    R0,??DataTable3_7
   \   0000006C   0x2101             MOVS     R1,#+1
   \   0000006E   0x7001             STRB     R1,[R0, #+0]
    152              if(IntegrationTime >= 20)
   \                     ??CalculateIntegrationTime_2:
   \   00000070   0x....             LDR.N    R0,??DataTable3_7
   \   00000072   0x7800             LDRB     R0,[R0, #+0]
   \   00000074   0x2814             CMP      R0,#+20
   \   00000076   0xD302             BCC.N    ??CalculateIntegrationTime_3
    153                  IntegrationTime = 20;
   \   00000078   0x....             LDR.N    R0,??DataTable3_7
   \   0000007A   0x2114             MOVS     R1,#+20
   \   0000007C   0x7001             STRB     R1,[R0, #+0]
    154          }
   \                     ??CalculateIntegrationTime_3:
   \   0000007E   0xBD01             POP      {R0,PC}          ;; return
    155          
    156          /*************************************************************************
    157          *                           蓝宙电子工作室
    158          *
    159          *  函数名称：PixelAverage
    160          *  功能说明：求数组的均值程序
    161          *  参数说明：
    162          *  函数返回：无
    163          *  修改时间：2012-10-20
    164          *  备    注：
    165          *************************************************************************/
    166          

   \                                 In section .text, align 2, keep-with-next
    167          uint8 PixelAverage(uint8 len, uint8 *data) 
    168          {
   \                     PixelAverage:
   \   00000000   0xB410             PUSH     {R4}
    169            unsigned char i;
    170            unsigned int sum = 0;
   \   00000002   0x2300             MOVS     R3,#+0
    171            for(i = 0; i<len; i++) 
   \   00000004   0x2200             MOVS     R2,#+0
   \   00000006   0xE004             B.N      ??PixelAverage_0
    172            {
    173              sum = sum + *data++;
   \                     ??PixelAverage_1:
   \   00000008   0x780C             LDRB     R4,[R1, #+0]
   \   0000000A   0xFA53 0xF384      UXTAB    R3,R3,R4
   \   0000000E   0x1C49             ADDS     R1,R1,#+1
    174            }
   \   00000010   0x1C52             ADDS     R2,R2,#+1
   \                     ??PixelAverage_0:
   \   00000012   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000014   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000016   0x4282             CMP      R2,R0
   \   00000018   0xD3F6             BCC.N    ??PixelAverage_1
    175            return ((unsigned char)(sum/len));
   \   0000001A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001C   0xFBB3 0xF0F0      UDIV     R0,R3,R0
   \   00000020   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000022   0xBC10             POP      {R4}
   \   00000024   0x4770             BX       LR               ;; return
    176          }
    177          /*************************************************************************
    178          *                           蓝宙电子工作室
    179          *
    180          *  函数名称：SendHex
    181          *  功能说明：采集发送程序
    182          *  参数说明：
    183          *  函数返回：无
    184          *  修改时间：2012-10-20
    185          *  备    注：
    186          *************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    187          void SendHex(unsigned char hex) 
    188          {
   \                     SendHex:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    189            unsigned char temp;
    190            temp = hex >> 4;
   \   00000004   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000006   0x0920             LSRS     R0,R4,#+4
    191            if(temp < 10) 
   \   00000008   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000A   0x280A             CMP      R0,#+10
   \   0000000C   0xD206             BCS.N    ??SendHex_0
    192            {
    193             uart_send1(UART0,temp + '0');
   \   0000000E   0xF110 0x0130      ADDS     R1,R0,#+48
   \   00000012   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000014   0x....             LDR.N    R0,??DataTable3_8  ;; 0x4006a000
   \   00000016   0x.... 0x....      BL       uart_send1
   \   0000001A   0xE005             B.N      ??SendHex_1
    194            } 
    195            else 
    196            {
    197             uart_send1(UART0,temp - 10 + 'A');
   \                     ??SendHex_0:
   \   0000001C   0xF110 0x0137      ADDS     R1,R0,#+55
   \   00000020   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000022   0x....             LDR.N    R0,??DataTable3_8  ;; 0x4006a000
   \   00000024   0x.... 0x....      BL       uart_send1
    198            }
    199            temp = hex & 0x0F;
   \                     ??SendHex_1:
   \   00000028   0xF014 0x000F      ANDS     R0,R4,#0xF
    200            if(temp < 10) 
   \   0000002C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002E   0x280A             CMP      R0,#+10
   \   00000030   0xD206             BCS.N    ??SendHex_2
    201            {
    202             uart_send1(UART0,temp + '0');
   \   00000032   0xF110 0x0130      ADDS     R1,R0,#+48
   \   00000036   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000038   0x....             LDR.N    R0,??DataTable3_8  ;; 0x4006a000
   \   0000003A   0x.... 0x....      BL       uart_send1
   \   0000003E   0xE005             B.N      ??SendHex_3
    203            } 
    204            else 
    205            {
    206            uart_send1(UART0,temp - 10 + 'A');
   \                     ??SendHex_2:
   \   00000040   0xF110 0x0137      ADDS     R1,R0,#+55
   \   00000044   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000046   0x....             LDR.N    R0,??DataTable3_8  ;; 0x4006a000
   \   00000048   0x.... 0x....      BL       uart_send1
    207            }
    208          }
   \                     ??SendHex_3:
   \   0000004C   0xBD10             POP      {R4,PC}          ;; return
    209          /*************************************************************************
    210          *                           蓝宙电子工作室
    211          *
    212          *  函数名称：SendImageData
    213          *  功能说明：
    214          *  参数说明：
    215          *  函数返回：无
    216          *  修改时间：2012-10-20
    217          *  备    注：
    218          *************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    219          void SendImageData(unsigned char * ImageData) 
    220          {
   \                     SendImageData:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
    221          
    222              unsigned char i;
    223              unsigned char crc = 0;
   \   00000004   0x2600             MOVS     R6,#+0
    224          
    225              /* Send Data */
    226              
    227              uart_send1(UART0,'*');
   \   00000006   0x212A             MOVS     R1,#+42
   \   00000008   0x....             LDR.N    R0,??DataTable3_8  ;; 0x4006a000
   \   0000000A   0x.... 0x....      BL       uart_send1
    228              uart_send1(UART0,'L');
   \   0000000E   0x214C             MOVS     R1,#+76
   \   00000010   0x....             LDR.N    R0,??DataTable3_8  ;; 0x4006a000
   \   00000012   0x.... 0x....      BL       uart_send1
    229              uart_send1(UART0,'D');
   \   00000016   0x2144             MOVS     R1,#+68
   \   00000018   0x....             LDR.N    R0,??DataTable3_8  ;; 0x4006a000
   \   0000001A   0x.... 0x....      BL       uart_send1
    230          
    231              SendHex(0);
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0x.... 0x....      BL       SendHex
    232              SendHex(0);
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0x.... 0x....      BL       SendHex
    233              SendHex(0);
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0x.... 0x....      BL       SendHex
    234              SendHex(0);
   \   00000030   0x2000             MOVS     R0,#+0
   \   00000032   0x.... 0x....      BL       SendHex
    235              
    236              for(i=0; i<128; i++) 
   \   00000036   0x2500             MOVS     R5,#+0
   \   00000038   0xE004             B.N      ??SendImageData_0
    237              {
    238                SendHex(*ImageData++);
   \                     ??SendImageData_1:
   \   0000003A   0x7820             LDRB     R0,[R4, #+0]
   \   0000003C   0x.... 0x....      BL       SendHex
   \   00000040   0x1C64             ADDS     R4,R4,#+1
    239              }
   \   00000042   0x1C6D             ADDS     R5,R5,#+1
   \                     ??SendImageData_0:
   \   00000044   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000046   0x2D80             CMP      R5,#+128
   \   00000048   0xD3F7             BCC.N    ??SendImageData_1
    240          
    241              SendHex(crc);
   \   0000004A   0x0030             MOVS     R0,R6
   \   0000004C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000004E   0x.... 0x....      BL       SendHex
    242              uart_send1(UART0,'#');
   \   00000052   0x2123             MOVS     R1,#+35
   \   00000054   0x....             LDR.N    R0,??DataTable3_8  ;; 0x4006a000
   \   00000056   0x.... 0x....      BL       uart_send1
    243          }
   \   0000005A   0xBD70             POP      {R4-R6,PC}       ;; return
    244          /*************************************************************************
    245          *                           蓝宙电子工作室
    246          *
    247          *  函数名称：SamplingDelay
    248          *  功能说明：CCD延时程序 200ns
    249          *  参数说明：
    250          *  函数返回：无
    251          *  修改时间：2012-10-20
    252          *  备    注：
    253          *************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    254           void SamplingDelay(void)
    255          {
   \                     SamplingDelay:
   \   00000000   0xB081             SUB      SP,SP,#+4
    256             volatile uint8 i ;
    257             for(i=0;i<1;i++) 
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \   00000008   0xE006             B.N      ??SamplingDelay_0
    258             {
    259              asm("nop");
   \                     ??SamplingDelay_1:
   \   0000000A   0xBF00             nop              
    260              asm("nop");
   \   0000000C   0xBF00             nop              
    261             }
   \   0000000E   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000012   0x1C40             ADDS     R0,R0,#+1
   \   00000014   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \                     ??SamplingDelay_0:
   \   00000018   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000001C   0x2801             CMP      R0,#+1
   \   0000001E   0xD3F4             BCC.N    ??SamplingDelay_1
    262             
    263          }
   \   00000020   0xB001             ADD      SP,SP,#+4
   \   00000022   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x400FF100         DC32     0x400ff100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0x........         DC32     Pixel

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   0x........         DC32     PixelAverageValue

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \   00000000   0x........         DC32     PixelAverageVoltage

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \   00000000   0x........         DC32     TargetPixelAverageVoltage

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_5:
   \   00000000   0x........         DC32     PixelAverageVoltageError

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_6:
   \   00000000   0x........         DC32     TargetPixelAverageVoltageAllowError

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_7:
   \   00000000   0x........         DC32     IntegrationTime

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_8:
   \   00000000   0x4006A000         DC32     0x4006a000

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        8  CCD_init
              8 -> gpio_init
              8 -> hw_adc_init
        8  CalculateIntegrationTime
              8 -> PixelAverage
       16  ImageCapture
             16 -> CLK_ClrVal
             16 -> CLK_SetVal
             16 -> SI_ClrVal
             16 -> SI_SetVal
             16 -> SamplingDelay
             16 -> hw_ad_once
        4  PixelAverage
        4  SamplingDelay
        8  SendHex
              8 -> uart_send1
       16  SendImageData
             16 -> SendHex
             16 -> uart_send1
        8  StartIntegration
              8 -> CLK_ClrVal
              8 -> CLK_SetVal
              8 -> SI_ClrVal
              8 -> SI_SetVal
              8 -> SamplingDelay


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
       4  ??DataTable3_5
       4  ??DataTable3_6
       4  ??DataTable3_7
       4  ??DataTable3_8
      34  CCD_init
     128  CalculateIntegrationTime
     138  ImageCapture
       1  IntegrationTime
      38  PixelAverage
       1  PixelAverageValue
       1  PixelAverageVoltage
       2  PixelAverageVoltageError
      36  SamplingDelay
      78  SendHex
      92  SendImageData
      92  StartIntegration
       2  TargetPixelAverageVoltage
       2  TargetPixelAverageVoltageAllowError

 
   4 bytes in section .bss
   5 bytes in section .data
 672 bytes in section .text
 
 672 bytes of CODE memory
   9 bytes of DATA memory

Errors: none
Warnings: 8
