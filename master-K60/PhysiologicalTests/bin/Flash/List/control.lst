###############################################################################
#
# IAR ANSI C/C++ Compiler V7.10.1.6676/W32 for ARM        12/Apr/2015  12:35:15
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\Administrator\Desktop\PhysiologicalTests\src\Sources\C\Component_C\control.c
#    Command line =  
#        C:\Users\Administrator\Desktop\PhysiologicalTests\src\Sources\C\Component_C\control.c
#        -D IAR -D TWR_K60N512 -lCN
#        C:\Users\Administrator\Desktop\PhysiologicalTests\bin\Flash\List\ -lB
#        C:\Users\Administrator\Desktop\PhysiologicalTests\bin\Flash\List\ -o
#        C:\Users\Administrator\Desktop\PhysiologicalTests\bin\Flash\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=None --dlib_config "D:\MyProgramFiles\iar for
#        arm v7.1\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\Administrator\Desktop\PhysiologicalTests\src\Sources\H\ -I
#        C:\Users\Administrator\Desktop\PhysiologicalTests\src\Sources\H\Component_H\
#        -I
#        C:\Users\Administrator\Desktop\PhysiologicalTests\src\Sources\H\Frame_H\
#        -Ol --use_c++_inline
#    List file    =  
#        C:\Users\Administrator\Desktop\PhysiologicalTests\bin\Flash\List\control.lst
#    Object file  =  
#        C:\Users\Administrator\Desktop\PhysiologicalTests\bin\Flash\Obj\control.o
#
###############################################################################

C:\Users\Administrator\Desktop\PhysiologicalTests\src\Sources\C\Component_C\control.c
      1          #include "includes.h"
      2          //------------------------------------------------------------------------------

   \                                 In section .bss, align 4
      3          int16   g_nInputVoltage[5]={0};
   \                     g_nInputVoltage:
   \   00000000                      DS8 12

   \                                 In section .bss, align 4
      4          int32	g_lnInputVoltageSigma[5]={0};    	
   \                     g_lnInputVoltageSigma:
   \   00000000                      DS8 20
      5          #define VOLTAGE_GRAVITY                     g_nInputVoltage[0]
      6          #define VOLTAGE_GYRO                        g_nInputVoltage[1]
      7          
      8          //-----------

   \                                 In section .bss, align 4
      9          float g_fCarSpeed=0;
   \                     g_fCarSpeed:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     10          float g_fCarSpeedstart=0;
   \                     g_fCarSpeedstart:
   \   00000000                      DS8 4

   \                                 In section .bss, align 2
     11          int16 g_nMotorPulse=0;
   \                     g_nMotorPulse:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
     12          int16 g_nRightMotorPulse=0;
   \                     g_nRightMotorPulse:
   \   00000000                      DS8 2

   \                                 In section .bss, align 4
     13          float g_fSpeedControlIntegral=0;
   \                     g_fSpeedControlIntegral:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     14          float g_fSpeedControlOutOld =0;
   \                     g_fSpeedControlOutOld:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     15          float g_fSpeedControlOutNew =0;
   \                     g_fSpeedControlOutNew:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     16          float g_fSpeedControlOut =0;
   \                     g_fSpeedControlOut:
   \   00000000                      DS8 4

   \                                 In section .bss, align 1
     17          uint8 g_nSpeedControlPeriod =0;
   \                     g_nSpeedControlPeriod:
   \   00000000                      DS8 1
     18          
     19          //------------

   \                                 In section .bss, align 4
     20          float g_fMotorOut=0;
   \                     g_fMotorOut:
   \   00000000                      DS8 4

   \                                 In section .bss, align 2
     21          int16 g_nMotorPulseSigma =0;
   \                     g_nMotorPulseSigma:
   \   00000000                      DS8 2
     22          
     23          extern int16 speedflag;
     24          //----------------------------------------------------------------------------------------------------

   \                                 In section .bss, align 2
     25          int16   gravity,voltage_gravity;
   \                     gravity:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     voltage_gravity:
   \   00000000                      DS8 2
     26          extern  int16   hongwai_l,hongwai_r;
     27          extern  int16   HONGWAI_L,HONGWAI_R;
     28          

   \                                 In section .text, align 2, keep-with-next
     29          void GetSamplezhi()
     30          {
   \                     GetSamplezhi: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     31            g_lnInputVoltageSigma[0]+= hw_ad_ave(0,17,12,20);//左1   
   \   00000002   0x2314             MOVS     R3,#+20
   \   00000004   0x220C             MOVS     R2,#+12
   \   00000006   0x2111             MOVS     R1,#+17
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x.... 0x....      BL       hw_ad_ave
   \   0000000E   0x....             LDR.N    R1,??DataTable5
   \   00000010   0x6809             LDR      R1,[R1, #+0]
   \   00000012   0xFA11 0xF080      UXTAH    R0,R1,R0
   \   00000016   0x....             LDR.N    R1,??DataTable5
   \   00000018   0x6008             STR      R0,[R1, #+0]
     32            g_lnInputVoltageSigma[1]+= hw_ad_ave(1,7,12,20);//右1
   \   0000001A   0x2314             MOVS     R3,#+20
   \   0000001C   0x220C             MOVS     R2,#+12
   \   0000001E   0x2107             MOVS     R1,#+7
   \   00000020   0x2001             MOVS     R0,#+1
   \   00000022   0x.... 0x....      BL       hw_ad_ave
   \   00000026   0x....             LDR.N    R1,??DataTable5
   \   00000028   0x6849             LDR      R1,[R1, #+4]
   \   0000002A   0xFA11 0xF080      UXTAH    R0,R1,R0
   \   0000002E   0x....             LDR.N    R1,??DataTable5
   \   00000030   0x6048             STR      R0,[R1, #+4]
     33            //g_lnInputVoltageSigma[2]+= hw_ad_ave(0,12,12,20);
     34          }
   \   00000032   0xBD01             POP      {R0,PC}          ;; return
     35          

   \                                 In section .text, align 2, keep-with-next
     36          void GetOFFSET()
     37          {
     38            HONGWAI_L=g_lnInputVoltageSigma[0]/200;
   \                     GetOFFSET: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable5
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x21C8             MOVS     R1,#+200
   \   00000006   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   0000000A   0x....             LDR.N    R1,??DataTable5_1
   \   0000000C   0x8008             STRH     R0,[R1, #+0]
     39            HONGWAI_R=g_lnInputVoltageSigma[1]/200;
   \   0000000E   0x....             LDR.N    R0,??DataTable5
   \   00000010   0x6840             LDR      R0,[R0, #+4]
   \   00000012   0x21C8             MOVS     R1,#+200
   \   00000014   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   00000018   0x....             LDR.N    R1,??DataTable5_2
   \   0000001A   0x8008             STRH     R0,[R1, #+0]
     40            //gyro_direction= g_lnInputVoltageSigma[2]/200;  
     41          }
   \   0000001C   0x4770             BX       LR               ;; return
     42          

   \                                 In section .text, align 2, keep-with-next
     43          void get_ad()
     44          {
   \                     get_ad: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     45            hongwai_l = hw_ad_ave(0,17,12,20);              
   \   00000002   0x2314             MOVS     R3,#+20
   \   00000004   0x220C             MOVS     R2,#+12
   \   00000006   0x2111             MOVS     R1,#+17
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x.... 0x....      BL       hw_ad_ave
   \   0000000E   0x....             LDR.N    R1,??DataTable5_3
   \   00000010   0x8008             STRH     R0,[R1, #+0]
     46            hongwai_r = hw_ad_ave(1,7,12,20);                   
   \   00000012   0x2314             MOVS     R3,#+20
   \   00000014   0x220C             MOVS     R2,#+12
   \   00000016   0x2107             MOVS     R1,#+7
   \   00000018   0x2001             MOVS     R0,#+1
   \   0000001A   0x.... 0x....      BL       hw_ad_ave
   \   0000001E   0x....             LDR.N    R1,??DataTable5_4
   \   00000020   0x8008             STRH     R0,[R1, #+0]
     47            //DIR_CONTROL_D_VALUE = hw_ad_ave(0,12,12,20);            //---------得转向陀螺仪电压信号(PTB2)
     48          }
   \   00000022   0xBD01             POP      {R0,PC}          ;; return
     49          

   \                                 In section .text, align 2, keep-with-next
     50          int Abs(int a)
     51          {
     52            int i;
     53            i=a;
     54            if(i<0) i=-a;
   \                     Abs: (+1)
   \   00000000   0x2800             CMP      R0,#+0
   \   00000002   0xD501             BPL.N    ??Abs_0
   \   00000004   0x4240             RSBS     R0,R0,#+0
   \   00000006   0xE7FF             B.N      ??Abs_1
     55            else i=a;
     56            return i;
   \                     ??Abs_0: (+1)
   \                     ??Abs_1: (+1)
   \   00000008   0x4770             BX       LR               ;; return
     57          }        
     58          //-----------------------速度控制-------------------------------------------------------//

   \                                 In section .bss, align 4
     59                  int32    pulse_count=0,pulse_count_pre=0;
   \                     pulse_count:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     pulse_count_pre:
   \   00000000                      DS8 4
     60          extern  int16    speed;

   \                                 In section .bss, align 2
     61                  int16    speed_pwm=0;
   \                     speed_pwm:
   \   00000000                      DS8 2
     62          extern  int16    speed_B;
     63          extern  int16    speed_jian;
     64          extern  int16    PMAX;

   \                                 In section .data, align 2
     65                  int16    Psha=60;        
   \                     Psha:
   \   00000000   0x003C             DC16 60
     66          //----------------------------------测速---------------------------------------        

   \                                 In section .text, align 2, keep-with-next
     67          void GetMotorPulse()
     68          {
     69            uint32 nPulse;
     70            nPulse=FTM2_CNT;                     
   \                     GetMotorPulse: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable5_5  ;; 0x400b8004
   \   00000002   0x6800             LDR      R0,[R0, #+0]
     71            g_nMotorPulse = (int32)nPulse;      
   \   00000004   0x....             LDR.N    R1,??DataTable5_6
   \   00000006   0x8008             STRH     R0,[R1, #+0]
     72            g_nMotorPulseSigma +=g_nMotorPulse;
   \   00000008   0x....             LDR.N    R0,??DataTable5_7
   \   0000000A   0x8800             LDRH     R0,[R0, #+0]
   \   0000000C   0x....             LDR.N    R1,??DataTable5_6
   \   0000000E   0x8809             LDRH     R1,[R1, #+0]
   \   00000010   0x1808             ADDS     R0,R1,R0
   \   00000012   0x....             LDR.N    R1,??DataTable5_7
   \   00000014   0x8008             STRH     R0,[R1, #+0]
     73            FTM2_CNT=0;
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x....             LDR.N    R1,??DataTable5_5  ;; 0x400b8004
   \   0000001A   0x6008             STR      R0,[R1, #+0]
     74          }
   \   0000001C   0x4770             BX       LR               ;; return
     75          
     76          //----------------------------------刹车1---------------------------------------

   \                                 In section .text, align 2, keep-with-next
     77          void shache1()//条件得封闭
     78          { 
     79          }
   \                     shache1: (+1)
   \   00000000   0x4770             BX       LR               ;; return
     80          
     81          //---------------------------------------------------------------

   \                                 In section .bss, align 8
     82          double  x=0.0,y=0.0;
   \                     x:
   \   00000000                      DS8 8

   \                                 In section .bss, align 8
   \                     y:
   \   00000000                      DS8 8

   \                                 In section .data, align 2
     83          int16   Pmax=250,Pmin=0;   
   \                     Pmax:
   \   00000000   0x00FA             DC16 250

   \                                 In section .bss, align 2
   \                     Pmin:
   \   00000000                      DS8 2
     84          

   \                                 In section .text, align 2, keep-with-next
     85          void Speed_PID()
     86          {
   \                     Speed_PID: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
     87              pulse_count=g_nMotorPulseSigma; 
   \   00000002   0x....             LDR.N    R0,??DataTable5_7
   \   00000004   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   00000008   0x....             LDR.N    R1,??DataTable5_8
   \   0000000A   0x6008             STR      R0,[R1, #+0]
     88              g_nMotorPulseSigma=0;
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0x....             LDR.N    R1,??DataTable5_7
   \   00000010   0x8008             STRH     R0,[R1, #+0]
     89          
     90              //最高速度限制
     91              if(pulse_count>PMAX) 
   \   00000012   0x....             LDR.N    R0,??DataTable5_9
   \   00000014   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   00000018   0x....             LDR.N    R1,??DataTable5_8
   \   0000001A   0x6809             LDR      R1,[R1, #+0]
   \   0000001C   0x4288             CMP      R0,R1
   \   0000001E   0xDA06             BGE.N    ??Speed_PID_0
     92                speed = speed-speed_jian;//控制效果明显
   \   00000020   0x....             LDR.N    R0,??DataTable5_10
   \   00000022   0x8800             LDRH     R0,[R0, #+0]
   \   00000024   0x....             LDR.N    R1,??DataTable5_11
   \   00000026   0x8809             LDRH     R1,[R1, #+0]
   \   00000028   0x1A40             SUBS     R0,R0,R1
   \   0000002A   0x....             LDR.N    R1,??DataTable5_10
   \   0000002C   0x8008             STRH     R0,[R1, #+0]
     93          
     94              //刹车函数-------
     95              //-m1-//
     96              x=(double)((Psha-pulse_count)/((Pmax-Pmin)/3));
   \                     ??Speed_PID_0: (+1)
   \   0000002E   0x....             LDR.N    R0,??DataTable5_12
   \   00000030   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   00000034   0x....             LDR.N    R1,??DataTable5_13
   \   00000036   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \   0000003A   0x1A40             SUBS     R0,R0,R1
   \   0000003C   0x2103             MOVS     R1,#+3
   \   0000003E   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   00000042   0x....             LDR.N    R1,??DataTable5_14
   \   00000044   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \   00000048   0x....             LDR.N    R2,??DataTable5_8
   \   0000004A   0x6812             LDR      R2,[R2, #+0]
   \   0000004C   0x1A89             SUBS     R1,R1,R2
   \   0000004E   0xFB91 0xF0F0      SDIV     R0,R1,R0
   \   00000052   0x.... 0x....      BL       __aeabi_i2d
   \   00000056   0x....             LDR.N    R2,??DataTable5_15
   \   00000058   0xE9C2 0x0100      STRD     R0,R1,[R2, #+0]
     97              //y=(double)((Pset-pulse_count)/((Pmax-Pmin)/3));
     98              speed_B=(int16)((x-1/6*x*x*x+3*x*x*x*x*x)-300);//250
   \   0000005C   0x....             LDR.N    R0,??DataTable5_15
   \   0000005E   0xE9D0 0x2300      LDRD     R2,R3,[R0, #+0]
   \   00000062   0x2000             MOVS     R0,#+0
   \   00000064   0x2100             MOVS     R1,#+0
   \   00000066   0x.... 0x....      BL       __aeabi_dmul
   \   0000006A   0x....             LDR.N    R4,??DataTable5_15
   \   0000006C   0xE9D4 0x2300      LDRD     R2,R3,[R4, #+0]
   \   00000070   0x.... 0x....      BL       __aeabi_dmul
   \   00000074   0x....             LDR.N    R4,??DataTable5_15
   \   00000076   0xE9D4 0x2300      LDRD     R2,R3,[R4, #+0]
   \   0000007A   0x.... 0x....      BL       __aeabi_dmul
   \   0000007E   0x0002             MOVS     R2,R0
   \   00000080   0x000B             MOVS     R3,R1
   \   00000082   0x....             LDR.N    R4,??DataTable5_15
   \   00000084   0xE9D4 0x0100      LDRD     R0,R1,[R4, #+0]
   \   00000088   0x.... 0x....      BL       __aeabi_dsub
   \   0000008C   0x0004             MOVS     R4,R0
   \   0000008E   0x000D             MOVS     R5,R1
   \   00000090   0x....             LDR.N    R0,??DataTable5_15
   \   00000092   0xE9D0 0x2300      LDRD     R2,R3,[R0, #+0]
   \   00000096   0x2000             MOVS     R0,#+0
   \   00000098   0x....             LDR.N    R1,??DataTable5_16  ;; 0x40080000
   \   0000009A   0x.... 0x....      BL       __aeabi_dmul
   \   0000009E   0x....             LDR.N    R6,??DataTable5_15
   \   000000A0   0xE9D6 0x2300      LDRD     R2,R3,[R6, #+0]
   \   000000A4   0x.... 0x....      BL       __aeabi_dmul
   \   000000A8   0x....             LDR.N    R6,??DataTable5_15
   \   000000AA   0xE9D6 0x2300      LDRD     R2,R3,[R6, #+0]
   \   000000AE   0x.... 0x....      BL       __aeabi_dmul
   \   000000B2   0x....             LDR.N    R6,??DataTable5_15
   \   000000B4   0xE9D6 0x2300      LDRD     R2,R3,[R6, #+0]
   \   000000B8   0x.... 0x....      BL       __aeabi_dmul
   \   000000BC   0x....             LDR.N    R6,??DataTable5_15
   \   000000BE   0xE9D6 0x2300      LDRD     R2,R3,[R6, #+0]
   \   000000C2   0x.... 0x....      BL       __aeabi_dmul
   \   000000C6   0x0022             MOVS     R2,R4
   \   000000C8   0x002B             MOVS     R3,R5
   \   000000CA   0x.... 0x....      BL       __aeabi_dadd
   \   000000CE   0x2200             MOVS     R2,#+0
   \   000000D0   0x....             LDR.N    R3,??DataTable5_17  ;; 0xc072c000
   \   000000D2   0x.... 0x....      BL       __aeabi_dadd
   \   000000D6   0x.... 0x....      BL       __aeabi_d2iz
   \   000000DA   0x....             LDR.N    R1,??DataTable5_18
   \   000000DC   0x8008             STRH     R0,[R1, #+0]
     99              /*//-m2-//
    100              x=-(double)((pulse_count-Psha)/((Pmax-Pmin)/10));
    101              speed_B=(int16)(x*x*x-200);*/
    102              //--------------------------------------------- 
    103              speed_pwm=(int16)(speed+IncPID_Calculate(pulse_count*19/10));
   \   000000DE   0x....             LDR.N    R0,??DataTable5_8
   \   000000E0   0x6800             LDR      R0,[R0, #+0]
   \   000000E2   0x2113             MOVS     R1,#+19
   \   000000E4   0x4348             MULS     R0,R1,R0
   \   000000E6   0x210A             MOVS     R1,#+10
   \   000000E8   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   000000EC   0x.... 0x....      BL       IncPID_Calculate
   \   000000F0   0x....             LDR.N    R1,??DataTable5_10
   \   000000F2   0x8809             LDRH     R1,[R1, #+0]
   \   000000F4   0x1840             ADDS     R0,R0,R1
   \   000000F6   0x....             LDR.N    R1,??DataTable5_19
   \   000000F8   0x8008             STRH     R0,[R1, #+0]
    104              
    105              //限幅
    106              if(speed_pwm>1250)
   \   000000FA   0x....             LDR.N    R0,??DataTable5_19
   \   000000FC   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   00000100   0xF240 0x41E3      MOVW     R1,#+1251
   \   00000104   0x4288             CMP      R0,R1
   \   00000106   0xDB03             BLT.N    ??Speed_PID_1
    107                speed_pwm=1250;
   \   00000108   0xF240 0x40E2      MOVW     R0,#+1250
   \   0000010C   0x....             LDR.N    R1,??DataTable5_19
   \   0000010E   0x8008             STRH     R0,[R1, #+0]
    108              if(speed_pwm<-1250)
   \                     ??Speed_PID_1: (+1)
   \   00000110   0x....             LDR.N    R0,??DataTable5_19
   \   00000112   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   00000116   0x....             LDR.N    R1,??DataTable5_20  ;; 0xfffffb1e
   \   00000118   0x4288             CMP      R0,R1
   \   0000011A   0xDA02             BGE.N    ??Speed_PID_2
    109                speed_pwm=-1250;
   \   0000011C   0x....             LDR.N    R0,??DataTable5_20  ;; 0xfffffb1e
   \   0000011E   0x....             LDR.N    R1,??DataTable5_19
   \   00000120   0x8008             STRH     R0,[R1, #+0]
    110              
    111              //输出
    112              if(speed_pwm>0) 
   \                     ??Speed_PID_2: (+1)
   \   00000122   0x....             LDR.N    R0,??DataTable5_19
   \   00000124   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   00000128   0x2801             CMP      R0,#+1
   \   0000012A   0xDB0B             BLT.N    ??Speed_PID_3
    113              {
    114                gpio_init(PORTB, 9, 1,0);//DIL_B;
   \   0000012C   0x2300             MOVS     R3,#+0
   \   0000012E   0x2201             MOVS     R2,#+1
   \   00000130   0x2109             MOVS     R1,#+9
   \   00000132   0x....             LDR.N    R0,??DataTable5_21  ;; 0x400ff040
   \   00000134   0x.... 0x....      BL       gpio_init
    115                FTM1_C0V=speed_pwm;
   \   00000138   0x....             LDR.N    R0,??DataTable5_19
   \   0000013A   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   0000013E   0x....             LDR.N    R1,??DataTable5_22  ;; 0x40039010
   \   00000140   0x6008             STR      R0,[R1, #+0]
   \   00000142   0xE00C             B.N      ??Speed_PID_4
    116              }
    117              else 
    118              {
    119                gpio_init(PORTB, 9, 1,1);//DIL_F;
   \                     ??Speed_PID_3: (+1)
   \   00000144   0x2301             MOVS     R3,#+1
   \   00000146   0x2201             MOVS     R2,#+1
   \   00000148   0x2109             MOVS     R1,#+9
   \   0000014A   0x....             LDR.N    R0,??DataTable5_21  ;; 0x400ff040
   \   0000014C   0x.... 0x....      BL       gpio_init
    120                FTM1_C0V=1250+speed_pwm;
   \   00000150   0x....             LDR.N    R0,??DataTable5_19
   \   00000152   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   00000156   0xF200 0x40E2      ADDW     R0,R0,#+1250
   \   0000015A   0x....             LDR.N    R1,??DataTable5_22  ;; 0x40039010
   \   0000015C   0x6008             STR      R0,[R1, #+0]
    121              }
    122          }
   \                     ??Speed_PID_4: (+1)
   \   0000015E   0xBD70             POP      {R4-R6,PC}       ;; return
    123          
    124          //-----------------------------------------------------------------------
    125          #define Car_Control_MAX 3750
    126          #define Car_Control_MIN -3750
    127          #define Car_Control_MOD 3750
    128          

   \                                 In section .text, align 2, keep-with-next
    129          void Car_Control_PWM(uint8 motor,int pwmin)
    130          {    
   \                     Car_Control_PWM: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    131              if(pwmin>0)
   \   00000002   0x2901             CMP      R1,#+1
   \   00000004   0xDB28             BLT.N    ??Car_Control_PWM_0
    132              {
    133                  if(motor==MOTOR_LEFT)
   \   00000006   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD112             BNE.N    ??Car_Control_PWM_1
    134                  {
    135                      if(pwmin>Car_Control_MAX)
   \   0000000C   0xF640 0x60A7      MOVW     R0,#+3751
   \   00000010   0x4281             CMP      R1,R0
   \   00000012   0xDB01             BLT.N    ??Car_Control_PWM_2
    136                         pwmin=Car_Control_MAX;
   \   00000014   0xF640 0x61A6      MOVW     R1,#+3750
    137                      DIR_LEFT_F;
   \                     ??Car_Control_PWM_2: (+1)
   \   00000018   0x....             LDR.N    R0,??DataTable5_21  ;; 0x400ff040
   \   0000001A   0x6800             LDR      R0,[R0, #+0]
   \   0000001C   0xF430 0x7000      BICS     R0,R0,#0x200
   \   00000020   0x....             LDR.N    R1,??DataTable5_21  ;; 0x400ff040
   \   00000022   0x6008             STR      R0,[R1, #+0]
    138                      FTM_PWM_ChangeDuty(1,0,8000);
   \   00000024   0xF44F 0x52FA      MOV      R2,#+8000
   \   00000028   0x2100             MOVS     R1,#+0
   \   0000002A   0x2001             MOVS     R0,#+1
   \   0000002C   0x.... 0x....      BL       FTM_PWM_ChangeDuty
   \   00000030   0xE053             B.N      ??Car_Control_PWM_3
    139                  }
    140                  else
    141                  {
    142                      if(pwmin>Car_Control_MAX)
   \                     ??Car_Control_PWM_1: (+1)
   \   00000032   0xF640 0x60A7      MOVW     R0,#+3751
   \   00000036   0x4281             CMP      R1,R0
   \   00000038   0xDB01             BLT.N    ??Car_Control_PWM_4
    143                         pwmin=Car_Control_MAX;
   \   0000003A   0xF640 0x61A6      MOVW     R1,#+3750
    144                      DIR_RIGHT_F;
   \                     ??Car_Control_PWM_4: (+1)
   \   0000003E   0x....             LDR.N    R0,??DataTable5_21  ;; 0x400ff040
   \   00000040   0x6800             LDR      R0,[R0, #+0]
   \   00000042   0xF430 0x5080      BICS     R0,R0,#0x1000
   \   00000046   0x....             LDR.N    R1,??DataTable5_21  ;; 0x400ff040
   \   00000048   0x6008             STR      R0,[R1, #+0]
    145                      FTM_PWM_ChangeDuty(1,0,8000);
   \   0000004A   0xF44F 0x52FA      MOV      R2,#+8000
   \   0000004E   0x2100             MOVS     R1,#+0
   \   00000050   0x2001             MOVS     R0,#+1
   \   00000052   0x.... 0x....      BL       FTM_PWM_ChangeDuty
   \   00000056   0xE040             B.N      ??Car_Control_PWM_3
    146                  }
    147              }
    148              else if(pwmin==0)
   \                     ??Car_Control_PWM_0: (+1)
   \   00000058   0x2900             CMP      R1,#+0
   \   0000005A   0xD11A             BNE.N    ??Car_Control_PWM_5
    149              {
    150                  if(motor==MOTOR_LEFT)
   \   0000005C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000005E   0x2800             CMP      R0,#+0
   \   00000060   0xD10B             BNE.N    ??Car_Control_PWM_6
    151                  {
    152                      DIR_LEFT_F;
   \   00000062   0x....             LDR.N    R0,??DataTable5_21  ;; 0x400ff040
   \   00000064   0x6800             LDR      R0,[R0, #+0]
   \   00000066   0xF430 0x7000      BICS     R0,R0,#0x200
   \   0000006A   0x....             LDR.N    R1,??DataTable5_21  ;; 0x400ff040
   \   0000006C   0x6008             STR      R0,[R1, #+0]
    153                      FTM_PWM_ChangeDuty(1,0,0);
   \   0000006E   0x2200             MOVS     R2,#+0
   \   00000070   0x2100             MOVS     R1,#+0
   \   00000072   0x2001             MOVS     R0,#+1
   \   00000074   0x.... 0x....      BL       FTM_PWM_ChangeDuty
   \   00000078   0xE02F             B.N      ??Car_Control_PWM_3
    154                  }
    155                  else
    156                  {
    157                      DIR_RIGHT_F;
   \                     ??Car_Control_PWM_6: (+1)
   \   0000007A   0x....             LDR.N    R0,??DataTable5_21  ;; 0x400ff040
   \   0000007C   0x6800             LDR      R0,[R0, #+0]
   \   0000007E   0xF430 0x5080      BICS     R0,R0,#0x1000
   \   00000082   0x....             LDR.N    R1,??DataTable5_21  ;; 0x400ff040
   \   00000084   0x6008             STR      R0,[R1, #+0]
    158                      FTM_PWM_ChangeDuty(1,0,0);
   \   00000086   0x2200             MOVS     R2,#+0
   \   00000088   0x2100             MOVS     R1,#+0
   \   0000008A   0x2001             MOVS     R0,#+1
   \   0000008C   0x.... 0x....      BL       FTM_PWM_ChangeDuty
   \   00000090   0xE023             B.N      ??Car_Control_PWM_3
    159                  }
    160              }
    161              else
    162              {
    163                  if(motor==MOTOR_LEFT)
   \                     ??Car_Control_PWM_5: (+1)
   \   00000092   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000094   0x2800             CMP      R0,#+0
   \   00000096   0xD110             BNE.N    ??Car_Control_PWM_7
    164                  {
    165                      if(pwmin<Car_Control_MIN)
   \   00000098   0x....             LDR.N    R0,??DataTable5_23  ;; 0xfffff15a
   \   0000009A   0x4281             CMP      R1,R0
   \   0000009C   0xDA00             BGE.N    ??Car_Control_PWM_8
    166                        pwmin=Car_Control_MIN;
   \   0000009E   0x....             LDR.N    R1,??DataTable5_23  ;; 0xfffff15a
    167                      DIR_LEFT_B;
   \                     ??Car_Control_PWM_8: (+1)
   \   000000A0   0x....             LDR.N    R0,??DataTable5_21  ;; 0x400ff040
   \   000000A2   0x6800             LDR      R0,[R0, #+0]
   \   000000A4   0xF450 0x7000      ORRS     R0,R0,#0x200
   \   000000A8   0x....             LDR.N    R1,??DataTable5_21  ;; 0x400ff040
   \   000000AA   0x6008             STR      R0,[R1, #+0]
    168                      FTM_PWM_ChangeDuty(1,0,8000);
   \   000000AC   0xF44F 0x52FA      MOV      R2,#+8000
   \   000000B0   0x2100             MOVS     R1,#+0
   \   000000B2   0x2001             MOVS     R0,#+1
   \   000000B4   0x.... 0x....      BL       FTM_PWM_ChangeDuty
   \   000000B8   0xE00F             B.N      ??Car_Control_PWM_3
    169                  }
    170                  else
    171                  {
    172                      if(pwmin<Car_Control_MIN)
   \                     ??Car_Control_PWM_7: (+1)
   \   000000BA   0x....             LDR.N    R0,??DataTable5_23  ;; 0xfffff15a
   \   000000BC   0x4281             CMP      R1,R0
   \   000000BE   0xDA00             BGE.N    ??Car_Control_PWM_9
    173                        pwmin=Car_Control_MIN;
   \   000000C0   0x....             LDR.N    R1,??DataTable5_23  ;; 0xfffff15a
    174                      DIR_RIGHT_B;
   \                     ??Car_Control_PWM_9: (+1)
   \   000000C2   0x....             LDR.N    R0,??DataTable5_21  ;; 0x400ff040
   \   000000C4   0x6800             LDR      R0,[R0, #+0]
   \   000000C6   0xF450 0x5080      ORRS     R0,R0,#0x1000
   \   000000CA   0x....             LDR.N    R1,??DataTable5_21  ;; 0x400ff040
   \   000000CC   0x6008             STR      R0,[R1, #+0]
    175                      FTM_PWM_ChangeDuty(1,0,8000);
   \   000000CE   0xF44F 0x52FA      MOV      R2,#+8000
   \   000000D2   0x2100             MOVS     R1,#+0
   \   000000D4   0x2001             MOVS     R0,#+1
   \   000000D6   0x.... 0x....      BL       FTM_PWM_ChangeDuty
    176                  }
    177              }
    178          }
   \                     ??Car_Control_PWM_3: (+1)
   \   000000DA   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0x........         DC32     g_lnInputVoltageSigma

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \   00000000   0x........         DC32     HONGWAI_L

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \   00000000   0x........         DC32     HONGWAI_R

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_3:
   \   00000000   0x........         DC32     hongwai_l

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_4:
   \   00000000   0x........         DC32     hongwai_r

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_5:
   \   00000000   0x400B8004         DC32     0x400b8004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_6:
   \   00000000   0x........         DC32     g_nMotorPulse

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_7:
   \   00000000   0x........         DC32     g_nMotorPulseSigma

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_8:
   \   00000000   0x........         DC32     pulse_count

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_9:
   \   00000000   0x........         DC32     PMAX

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_10:
   \   00000000   0x........         DC32     speed

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_11:
   \   00000000   0x........         DC32     speed_jian

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_12:
   \   00000000   0x........         DC32     Pmax

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_13:
   \   00000000   0x........         DC32     Pmin

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_14:
   \   00000000   0x........         DC32     Psha

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_15:
   \   00000000   0x........         DC32     x

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_16:
   \   00000000   0x40080000         DC32     0x40080000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_17:
   \   00000000   0xC072C000         DC32     0xc072c000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_18:
   \   00000000   0x........         DC32     speed_B

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_19:
   \   00000000   0x........         DC32     speed_pwm

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_20:
   \   00000000   0xFFFFFB1E         DC32     0xfffffb1e

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_21:
   \   00000000   0x400FF040         DC32     0x400ff040

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_22:
   \   00000000   0x40039010         DC32     0x40039010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_23:
   \   00000000   0xFFFFF15A         DC32     0xfffff15a

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   Abs
       8   Car_Control_PWM
         8   -> FTM_PWM_ChangeDuty
       0   GetMotorPulse
       0   GetOFFSET
       8   GetSamplezhi
         8   -> hw_ad_ave
      16   Speed_PID
        16   -> IncPID_Calculate
        16   -> __aeabi_d2iz
        16   -> __aeabi_dadd
        16   -> __aeabi_dmul
        16   -> __aeabi_dsub
        16   -> __aeabi_i2d
        16   -> gpio_init
       8   get_ad
         8   -> hw_ad_ave
       0   shache1


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_10
       4  ??DataTable5_11
       4  ??DataTable5_12
       4  ??DataTable5_13
       4  ??DataTable5_14
       4  ??DataTable5_15
       4  ??DataTable5_16
       4  ??DataTable5_17
       4  ??DataTable5_18
       4  ??DataTable5_19
       4  ??DataTable5_2
       4  ??DataTable5_20
       4  ??DataTable5_21
       4  ??DataTable5_22
       4  ??DataTable5_23
       4  ??DataTable5_3
       4  ??DataTable5_4
       4  ??DataTable5_5
       4  ??DataTable5_6
       4  ??DataTable5_7
       4  ??DataTable5_8
       4  ??DataTable5_9
      10  Abs
     220  Car_Control_PWM
      30  GetMotorPulse
      30  GetOFFSET
      52  GetSamplezhi
       2  Pmax
       2  Pmin
       2  Psha
     352  Speed_PID
       4  g_fCarSpeed
       4  g_fCarSpeedstart
       4  g_fMotorOut
       4  g_fSpeedControlIntegral
       4  g_fSpeedControlOut
       4  g_fSpeedControlOutNew
       4  g_fSpeedControlOutOld
      20  g_lnInputVoltageSigma
      12  g_nInputVoltage
       2  g_nMotorPulse
       2  g_nMotorPulseSigma
       2  g_nRightMotorPulse
       1  g_nSpeedControlPeriod
      36  get_ad
       2  gravity
       4  pulse_count
       4  pulse_count_pre
       2  shache1
       2  speed_pwm
       2  voltage_gravity
       8  x
       8  y

 
  99 bytes in section .bss
   4 bytes in section .data
 828 bytes in section .text
 
 828 bytes of CODE memory
 103 bytes of DATA memory

Errors: none
Warnings: none
