###############################################################################
#
# IAR ANSI C/C++ Compiler V7.10.1.6676/W32 for ARM        08/Apr/2015  15:15:24
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\Administrator\Desktop\PhysiologicalTests\src\Sources\C\Component_C\delay.c
#    Command line =  
#        C:\Users\Administrator\Desktop\PhysiologicalTests\src\Sources\C\Component_C\delay.c
#        -D IAR -D TWR_K60N512 -lCN
#        C:\Users\Administrator\Desktop\PhysiologicalTests\bin\Flash\List\ -lB
#        C:\Users\Administrator\Desktop\PhysiologicalTests\bin\Flash\List\ -o
#        C:\Users\Administrator\Desktop\PhysiologicalTests\bin\Flash\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=None --dlib_config "D:\MyProgramFiles\iar for
#        arm v7.1\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\Administrator\Desktop\PhysiologicalTests\src\Sources\H\ -I
#        C:\Users\Administrator\Desktop\PhysiologicalTests\src\Sources\H\Component_H\
#        -I
#        C:\Users\Administrator\Desktop\PhysiologicalTests\src\Sources\H\Frame_H\
#        -Ol --use_c++_inline
#    List file    =  
#        C:\Users\Administrator\Desktop\PhysiologicalTests\bin\Flash\List\delay.lst
#    Object file  =  
#        C:\Users\Administrator\Desktop\PhysiologicalTests\bin\Flash\Obj\delay.o
#
###############################################################################

C:\Users\Administrator\Desktop\PhysiologicalTests\src\Sources\C\Component_C\delay.c
      1          #include"delay.h"
      2          #include"includes.h"
      3          

   \                                 In section .text, align 2, keep-with-next
      4          void delay(uint32 a)//由什么决定执行一次命令的时间呢？ 
      5          {
      6            uint32 i;
      7            for(i=0;i<a;i++);
   \                     delay: (+1)
   \   00000000   0x2100             MOVS     R1,#+0
   \   00000002   0xE000             B.N      ??delay_0
   \                     ??delay_1: (+1)
   \   00000004   0x1C49             ADDS     R1,R1,#+1
   \                     ??delay_0: (+1)
   \   00000006   0x4281             CMP      R1,R0
   \   00000008   0xD3FC             BCC.N    ??delay_1
      8          }
   \   0000000A   0x4770             BX       LR               ;; return
      9          

   \                                 In section .text, align 4, keep-with-next
     10          void SamplingDelay(void)//CCD延时程序 200ns
     11          {
   \                     SamplingDelay: (+1)
   \   00000000   0xB081             SUB      SP,SP,#+4
     12             volatile uint8 i;
     13             for(i=0;i<1;i++)
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \   00000008   0xE006             B.N      ??SamplingDelay_0
     14             {
     15              asm("nop");
   \                     ??SamplingDelay_1: (+1)
   \   0000000A   0xBF00             nop
     16              asm("nop");
   \   0000000C   0xBF00             nop
     17             }
   \   0000000E   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000012   0x1C40             ADDS     R0,R0,#+1
   \   00000014   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \                     ??SamplingDelay_0: (+1)
   \   00000018   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000001C   0x2800             CMP      R0,#+0
   \   0000001E   0xD0F4             BEQ.N    ??SamplingDelay_1
     18          }
   \   00000020   0xB001             ADD      SP,SP,#+4
   \   00000022   0x4770             BX       LR               ;; return
     19          

   \                                 In section .text, align 2, keep-with-next
     20          void Delay5us()
     21          {
   \                     Delay5us: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
     22            uint8 i=0;
   \   00000002   0x2400             MOVS     R4,#+0
     23            for(i = 0; i < 25; i++)
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x0004             MOVS     R4,R0
   \   00000008   0xE002             B.N      ??Delay5us_0
     24            {
     25              SamplingDelay();//200ns
   \                     ??Delay5us_1: (+1)
   \   0000000A   0x.... 0x....      BL       SamplingDelay
     26            }
   \   0000000E   0x1C64             ADDS     R4,R4,#+1
   \                     ??Delay5us_0: (+1)
   \   00000010   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000012   0x2C19             CMP      R4,#+25
   \   00000014   0xDBF9             BLT.N    ??Delay5us_1
     27          }
   \   00000016   0xBD10             POP      {R4,PC}          ;; return
     28          

   \                                 In section .text, align 2, keep-with-next
     29          void Delay_us(int count)
     30          {
   \                     Delay_us: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
     31            uint8 i=0;
   \   00000004   0x2500             MOVS     R5,#+0
     32            
     33            for(i = 0; i < count; i++)
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x0005             MOVS     R5,R0
   \   0000000A   0xE00A             B.N      ??Delay_us_0
     34            {
     35              SamplingDelay();//200ns
   \                     ??Delay_us_1: (+1)
   \   0000000C   0x.... 0x....      BL       SamplingDelay
     36              SamplingDelay();//200ns
   \   00000010   0x.... 0x....      BL       SamplingDelay
     37              SamplingDelay();//200ns
   \   00000014   0x.... 0x....      BL       SamplingDelay
     38              SamplingDelay();//200ns
   \   00000018   0x.... 0x....      BL       SamplingDelay
     39              SamplingDelay();//200ns
   \   0000001C   0x.... 0x....      BL       SamplingDelay
     40            }
   \   00000020   0x1C6D             ADDS     R5,R5,#+1
   \                     ??Delay_us_0: (+1)
   \   00000022   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000024   0x42A5             CMP      R5,R4
   \   00000026   0xDBF1             BLT.N    ??Delay_us_1
     41          }
   \   00000028   0xBD31             POP      {R0,R4,R5,PC}    ;; return
     42          

   \                                 In section .text, align 2, keep-with-next
     43          void delay_ms(uint32 count_val)
     44          {
     45            /* Make sure the clock to the LPTMR is enabled */
     46            SIM_SCGC5|=SIM_SCGC5_LPTIMER_MASK; 
   \                     delay_ms: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable0  ;; 0x40048038
   \   00000002   0x6809             LDR      R1,[R1, #+0]
   \   00000004   0xF051 0x0101      ORRS     R1,R1,#0x1
   \   00000008   0x....             LDR.N    R2,??DataTable0  ;; 0x40048038
   \   0000000A   0x6011             STR      R1,[R2, #+0]
     47            
     48            /* Set the compare value to the number of ms to delay */
     49            LPTMR0_CMR = count_val; 
   \   0000000C   0x....             LDR.N    R1,??DataTable0_1  ;; 0x40040008
   \   0000000E   0x6008             STR      R0,[R1, #+0]
     50            
     51            /* Set up LPTMR to use 1kHz LPO with no prescaler as its clock source */
     52            LPTMR0_PSR = LPTMR_PSR_PCS(1)|LPTMR_PSR_PBYP_MASK; 
   \   00000010   0x2005             MOVS     R0,#+5
   \   00000012   0x....             LDR.N    R1,??DataTable0_2  ;; 0x40040004
   \   00000014   0x6008             STR      R0,[R1, #+0]
     53            
     54            /* Start the timer */
     55            LPTMR0_CSR |= LPTMR_CSR_TEN_MASK; 
   \   00000016   0x....             LDR.N    R0,??DataTable0_3  ;; 0x40040000
   \   00000018   0x6800             LDR      R0,[R0, #+0]
   \   0000001A   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   0000001E   0x....             LDR.N    R1,??DataTable0_3  ;; 0x40040000
   \   00000020   0x6008             STR      R0,[R1, #+0]
     56          
     57            /* Wait for counter to reach compare value */
     58            while (!(LPTMR0_CSR & LPTMR_CSR_TCF_MASK));
   \                     ??delay_ms_0: (+1)
   \   00000022   0x....             LDR.N    R0,??DataTable0_3  ;; 0x40040000
   \   00000024   0x6800             LDR      R0,[R0, #+0]
   \   00000026   0x0600             LSLS     R0,R0,#+24
   \   00000028   0xD5FB             BPL.N    ??delay_ms_0
     59            
     60            /* Clear Timer Compare Flag */
     61            LPTMR0_CSR &= ~LPTMR_CSR_TEN_MASK;
   \   0000002A   0x....             LDR.N    R0,??DataTable0_3  ;; 0x40040000
   \   0000002C   0x6800             LDR      R0,[R0, #+0]
   \   0000002E   0x0840             LSRS     R0,R0,#+1
   \   00000030   0x0040             LSLS     R0,R0,#+1
   \   00000032   0x....             LDR.N    R1,??DataTable0_3  ;; 0x40040000
   \   00000034   0x6008             STR      R0,[R1, #+0]
     62            
     63            return;
   \   00000036   0x4770             BX       LR               ;; return
     64          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0:
   \   00000000   0x40048038         DC32     0x40048038

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_1:
   \   00000000   0x40040008         DC32     0x40040008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_2:
   \   00000000   0x40040004         DC32     0x40040004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_3:
   \   00000000   0x40040000         DC32     0x40040000

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   Delay5us
         8   -> SamplingDelay
      16   Delay_us
        16   -> SamplingDelay
       4   SamplingDelay
       0   delay
       0   delay_ms


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable0
       4  ??DataTable0_1
       4  ??DataTable0_2
       4  ??DataTable0_3
      24  Delay5us
      42  Delay_us
      36  SamplingDelay
      12  delay
      56  delay_ms

 
 186 bytes in section .text
 
 186 bytes of CODE memory

Errors: none
Warnings: none
