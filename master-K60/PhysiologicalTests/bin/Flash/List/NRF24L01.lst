###############################################################################
#
# IAR ANSI C/C++ Compiler V7.10.1.6676/W32 for ARM        08/Apr/2015  15:15:26
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\Administrator\Desktop\PhysiologicalTests\src\Sources\C\Component_C\NRF24L01.c
#    Command line =  
#        C:\Users\Administrator\Desktop\PhysiologicalTests\src\Sources\C\Component_C\NRF24L01.c
#        -D IAR -D TWR_K60N512 -lCN
#        C:\Users\Administrator\Desktop\PhysiologicalTests\bin\Flash\List\ -lB
#        C:\Users\Administrator\Desktop\PhysiologicalTests\bin\Flash\List\ -o
#        C:\Users\Administrator\Desktop\PhysiologicalTests\bin\Flash\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=None --dlib_config "D:\MyProgramFiles\iar for
#        arm v7.1\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\Administrator\Desktop\PhysiologicalTests\src\Sources\H\ -I
#        C:\Users\Administrator\Desktop\PhysiologicalTests\src\Sources\H\Component_H\
#        -I
#        C:\Users\Administrator\Desktop\PhysiologicalTests\src\Sources\H\Frame_H\
#        -Ol --use_c++_inline
#    List file    =  
#        C:\Users\Administrator\Desktop\PhysiologicalTests\bin\Flash\List\NRF24L01.lst
#    Object file  =  
#        C:\Users\Administrator\Desktop\PhysiologicalTests\bin\Flash\Obj\NRF24L01.o
#
###############################################################################

C:\Users\Administrator\Desktop\PhysiologicalTests\src\Sources\C\Component_C\NRF24L01.c
      1          #include "includes.h"
      2          #include "NRF24L01.h"
      3          

   \                                 In section .data, align 4
      4          uint8 TX_ADDRESS[TX_ADR_WIDTH]  = {0x34,0x43,0x10,0x10,0x01}; // Define a static TX address
   \                     TX_ADDRESS:
   \   00000000   0x34 0x43          DC8 52, 67, 16, 16, 1, 0, 0, 0
   \              0x10 0x10    
   \              0x01 0x00    
   \              0x00 0x00    

   \                                 In section .data, align 4
      5          uint8 RX_ADDRESS[RX_ADR_WIDTH]  = {0x34,0x43,0x10,0x10,0x01}; // Define a static TX address
   \                     RX_ADDRESS:
   \   00000000   0x34 0x43          DC8 52, 67, 16, 16, 1, 0, 0, 0
   \              0x10 0x10    
   \              0x01 0x00    
   \              0x00 0x00    

   \                                 In section .bss, align 4
      6          uint8 rx_buf[TX_PLOAD_WIDTH];
   \                     rx_buf:
   \   00000000                      DS8 32

   \                                 In section .bss, align 4
      7          uint8 tx_buf[TX_PLOAD_WIDTH];
   \                     tx_buf:
   \   00000000                      DS8 32

   \                                 In section .bss, align 1
      8          uint8 flag;
   \                     flag:
   \   00000000                      DS8 1
      9          
     10          
     11          #define KEY 0xaa
     12          
     13          #define CE_set              gpio_init(PORTA , 12, 1, 1)
     14          #define CE_clr              gpio_init(PORTA , 12, 1, 0)
     15          #define CSN_set             gpio_init(PORTE , 2, 1, 1)
     16          #define CSN_clr             gpio_init(PORTE , 2, 1, 0)
     17          #define SCK_set             gpio_init(PORTA , 13, 1, 1)
     18          #define SCK_clr             gpio_init(PORTA , 13, 1, 0)
     19          #define MOSI_set            gpio_init(PORTE , 1, 1, 1)
     20          #define MOSI_clr            gpio_init(PORTE , 1, 1, 0)
     21          

   \                                 In section .text, align 2, keep-with-next
     22          void init_nrf24l01_io(void)
     23          {
   \                     init_nrf24l01_io: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     24            //NRF24L01≥ı ºªØ
     25            gpio_init(PORTA , 12, 1, 0);//CE
   \   00000002   0x2300             MOVS     R3,#+0
   \   00000004   0x2201             MOVS     R2,#+1
   \   00000006   0x210C             MOVS     R1,#+12
   \   00000008   0x.... 0x....      LDR.W    R0,??DataTable12  ;; 0x400ff000
   \   0000000C   0x.... 0x....      BL       gpio_init
     26            gpio_init(PORTE , 2, 1, 1);//CSN
   \   00000010   0x2301             MOVS     R3,#+1
   \   00000012   0x2201             MOVS     R2,#+1
   \   00000014   0x2102             MOVS     R1,#+2
   \   00000016   0x.... 0x....      LDR.W    R0,??DataTable12_1  ;; 0x400ff100
   \   0000001A   0x.... 0x....      BL       gpio_init
     27            gpio_init(PORTA , 13, 1, 0);//SCK
   \   0000001E   0x2300             MOVS     R3,#+0
   \   00000020   0x2201             MOVS     R2,#+1
   \   00000022   0x210D             MOVS     R1,#+13
   \   00000024   0x.... 0x....      LDR.W    R0,??DataTable12  ;; 0x400ff000
   \   00000028   0x.... 0x....      BL       gpio_init
     28            gpio_init(PORTE , 1, 1, 0);//MOSI
   \   0000002C   0x2300             MOVS     R3,#+0
   \   0000002E   0x2201             MOVS     R2,#+1
   \   00000030   0x2101             MOVS     R1,#+1
   \   00000032   0x....             LDR.N    R0,??DataTable12_1  ;; 0x400ff100
   \   00000034   0x.... 0x....      BL       gpio_init
     29            gpio_init(PORTB , 10, 0, 0);//MISO
   \   00000038   0x2300             MOVS     R3,#+0
   \   0000003A   0x2200             MOVS     R2,#+0
   \   0000003C   0x210A             MOVS     R1,#+10
   \   0000003E   0x....             LDR.N    R0,??DataTable12_2  ;; 0x400ff040
   \   00000040   0x.... 0x....      BL       gpio_init
     30            gpio_init(PORTE , 0, 0, 1);//IRQ
   \   00000044   0x2301             MOVS     R3,#+1
   \   00000046   0x2200             MOVS     R2,#+0
   \   00000048   0x2100             MOVS     R1,#+0
   \   0000004A   0x....             LDR.N    R0,??DataTable12_1  ;; 0x400ff100
   \   0000004C   0x.... 0x....      BL       gpio_init
     31          }
   \   00000050   0xBD01             POP      {R0,PC}          ;; return
     32          

   \                                 In section .text, align 2, keep-with-next
     33          uint8 SPI_RW(uint8 byte)
     34          {
   \                     SPI_RW: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
     35            int bit_ctr;
     36            
     37            for(bit_ctr=0;bit_ctr<8;bit_ctr++)  
   \   00000004   0x2500             MOVS     R5,#+0
   \   00000006   0xE019             B.N      ??SPI_RW_0
     38            {
     39              gpio_ctrl(PORTE,1,(byte & 0x80)>>7);//MOSI = (byte & 0x80);        
   \                     ??SPI_RW_1: (+1)
   \   00000008   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000A   0x09E2             LSRS     R2,R4,#+7
   \   0000000C   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000000E   0x2101             MOVS     R1,#+1
   \   00000010   0x....             LDR.N    R0,??DataTable12_1  ;; 0x400ff100
   \   00000012   0x.... 0x....      BL       gpio_ctrl
     40              byte = (byte << 1);           
   \   00000016   0x0064             LSLS     R4,R4,#+1
     41              SCK_set;                      
   \   00000018   0x2301             MOVS     R3,#+1
   \   0000001A   0x2201             MOVS     R2,#+1
   \   0000001C   0x210D             MOVS     R1,#+13
   \   0000001E   0x....             LDR.N    R0,??DataTable12  ;; 0x400ff000
   \   00000020   0x.... 0x....      BL       gpio_init
     42              byte |= gpio_read(PORTB,10);//byte |= MISO;    		  
   \   00000024   0x210A             MOVS     R1,#+10
   \   00000026   0x....             LDR.N    R0,??DataTable12_2  ;; 0x400ff040
   \   00000028   0x.... 0x....      BL       gpio_read
   \   0000002C   0x4304             ORRS     R4,R0,R4
     43              SCK_clr;            		 
   \   0000002E   0x2300             MOVS     R3,#+0
   \   00000030   0x2201             MOVS     R2,#+1
   \   00000032   0x210D             MOVS     R1,#+13
   \   00000034   0x....             LDR.N    R0,??DataTable12  ;; 0x400ff000
   \   00000036   0x.... 0x....      BL       gpio_init
     44            }
   \   0000003A   0x1C6D             ADDS     R5,R5,#+1
   \                     ??SPI_RW_0: (+1)
   \   0000003C   0x2D08             CMP      R5,#+8
   \   0000003E   0xDBE3             BLT.N    ??SPI_RW_1
     45            
     46            return(byte);           		  
   \   00000040   0x0020             MOVS     R0,R4
   \   00000042   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000044   0xBD32             POP      {R1,R4,R5,PC}    ;; return
     47          }
     48          

   \                                 In section .text, align 2, keep-with-next
     49          uint8 SPI_RW_Reg(uint8 reg, uint8 value)
     50          {
   \                     SPI_RW_Reg: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
     51            uint8 status;
     52            
     53            CSN_clr;                   // CSN low, init SPI transaction
   \   00000006   0x2300             MOVS     R3,#+0
   \   00000008   0x2201             MOVS     R2,#+1
   \   0000000A   0x2102             MOVS     R1,#+2
   \   0000000C   0x....             LDR.N    R0,??DataTable12_1  ;; 0x400ff100
   \   0000000E   0x.... 0x....      BL       gpio_init
     54            status = SPI_RW(reg);      // select register
   \   00000012   0x0020             MOVS     R0,R4
   \   00000014   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000016   0x.... 0x....      BL       SPI_RW
   \   0000001A   0x0004             MOVS     R4,R0
     55            SPI_RW(value);             // ..and write value to it..
   \   0000001C   0x0028             MOVS     R0,R5
   \   0000001E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000020   0x.... 0x....      BL       SPI_RW
     56            CSN_set;                   // CSN high again
   \   00000024   0x2301             MOVS     R3,#+1
   \   00000026   0x2201             MOVS     R2,#+1
   \   00000028   0x2102             MOVS     R1,#+2
   \   0000002A   0x....             LDR.N    R0,??DataTable12_1  ;; 0x400ff100
   \   0000002C   0x.... 0x....      BL       gpio_init
     57            
     58            return(status);            // return nRF24L01 status byte
   \   00000030   0x0020             MOVS     R0,R4
   \   00000032   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000034   0xBD32             POP      {R1,R4,R5,PC}    ;; return
     59          }
     60          

   \                                 In section .text, align 2, keep-with-next
     61          uint8 SPI_Read(uint8 reg)
     62          {
   \                     SPI_Read: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
     63            uint8 reg_val;
     64            
     65            CSN_clr;                // CSN low, initialize SPI communication...
   \   00000004   0x2300             MOVS     R3,#+0
   \   00000006   0x2201             MOVS     R2,#+1
   \   00000008   0x2102             MOVS     R1,#+2
   \   0000000A   0x....             LDR.N    R0,??DataTable12_1  ;; 0x400ff100
   \   0000000C   0x.... 0x....      BL       gpio_init
     66            SPI_RW(reg);            // Select register to read from..
   \   00000010   0x0020             MOVS     R0,R4
   \   00000012   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000014   0x.... 0x....      BL       SPI_RW
     67            reg_val = SPI_RW(0);    // ..then read registervalue
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0x.... 0x....      BL       SPI_RW
   \   0000001E   0x0004             MOVS     R4,R0
     68            CSN_set;               // CSN high, terminate SPI communication
   \   00000020   0x2301             MOVS     R3,#+1
   \   00000022   0x2201             MOVS     R2,#+1
   \   00000024   0x2102             MOVS     R1,#+2
   \   00000026   0x....             LDR.N    R0,??DataTable12_1  ;; 0x400ff100
   \   00000028   0x.... 0x....      BL       gpio_init
     69            
     70            return(reg_val);        // return register value
   \   0000002C   0x0020             MOVS     R0,R4
   \   0000002E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000030   0xBD10             POP      {R4,PC}          ;; return
     71          }
     72          

   \                                 In section .text, align 2, keep-with-next
     73          uint8 SPI_Read_Buf(uint8 reg, uint8 *pBuf, uint8 bytes)
     74          {
   \                     SPI_Read_Buf: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
     75            uint8 status,byte_ctr;
     76            
     77            CSN_clr;                    		// Set CSN low, init SPI tranaction
   \   00000008   0x2300             MOVS     R3,#+0
   \   0000000A   0x2201             MOVS     R2,#+1
   \   0000000C   0x2102             MOVS     R1,#+2
   \   0000000E   0x....             LDR.N    R0,??DataTable12_1  ;; 0x400ff100
   \   00000010   0x.... 0x....      BL       gpio_init
     78            status = SPI_RW(reg);       		// Select register to write to and read status byte
   \   00000014   0x0020             MOVS     R0,R4
   \   00000016   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000018   0x.... 0x....      BL       SPI_RW
   \   0000001C   0x0004             MOVS     R4,R0
     79            for(byte_ctr=0;byte_ctr<bytes;byte_ctr++)
   \   0000001E   0x2700             MOVS     R7,#+0
   \   00000020   0xE005             B.N      ??SPI_Read_Buf_0
     80              pBuf[byte_ctr] = SPI_RW(0);          // Perform SPI_RW to read byte from nRF24L01
   \                     ??SPI_Read_Buf_1: (+1)
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0x.... 0x....      BL       SPI_RW
   \   00000028   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000002A   0x5578             STRB     R0,[R7, R5]
   \   0000002C   0x1C7F             ADDS     R7,R7,#+1
   \                     ??SPI_Read_Buf_0: (+1)
   \   0000002E   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000030   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000032   0x42B7             CMP      R7,R6
   \   00000034   0xD3F5             BCC.N    ??SPI_Read_Buf_1
     81            CSN_set;                           // Set CSN high again
   \   00000036   0x2301             MOVS     R3,#+1
   \   00000038   0x2201             MOVS     R2,#+1
   \   0000003A   0x2102             MOVS     R1,#+2
   \   0000003C   0x....             LDR.N    R0,??DataTable12_1  ;; 0x400ff100
   \   0000003E   0x.... 0x....      BL       gpio_init
     82          
     83            return(status);                    // return nRF24L01 status byte
   \   00000042   0x0020             MOVS     R0,R4
   \   00000044   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000046   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
     84          }
     85          

   \                                 In section .text, align 2, keep-with-next
     86          uint8 SPI_Write_Buf(uint8 reg, uint8 *pBuf, uint8 bytes)
     87          {
   \                     SPI_Write_Buf: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
     88            uint8 status,byte_ctr;
     89            
     90            CSN_clr;                  
   \   00000008   0x2300             MOVS     R3,#+0
   \   0000000A   0x2201             MOVS     R2,#+1
   \   0000000C   0x2102             MOVS     R1,#+2
   \   0000000E   0x....             LDR.N    R0,??DataTable12_1  ;; 0x400ff100
   \   00000010   0x.... 0x....      BL       gpio_init
     91            status = SPI_RW(reg);    
   \   00000014   0x0020             MOVS     R0,R4
   \   00000016   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000018   0x.... 0x....      BL       SPI_RW
   \   0000001C   0x0004             MOVS     R4,R0
     92            for(byte_ctr=0; byte_ctr<bytes; byte_ctr++) 
   \   0000001E   0x2700             MOVS     R7,#+0
   \   00000020   0xE004             B.N      ??SPI_Write_Buf_0
     93              SPI_RW(*pBuf++);
   \                     ??SPI_Write_Buf_1: (+1)
   \   00000022   0x7828             LDRB     R0,[R5, #+0]
   \   00000024   0x.... 0x....      BL       SPI_RW
   \   00000028   0x1C6D             ADDS     R5,R5,#+1
   \   0000002A   0x1C7F             ADDS     R7,R7,#+1
   \                     ??SPI_Write_Buf_0: (+1)
   \   0000002C   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000002E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000030   0x42B7             CMP      R7,R6
   \   00000032   0xD3F6             BCC.N    ??SPI_Write_Buf_1
     94            CSN_set;  
   \   00000034   0x2301             MOVS     R3,#+1
   \   00000036   0x2201             MOVS     R2,#+1
   \   00000038   0x2102             MOVS     R1,#+2
   \   0000003A   0x....             LDR.N    R0,??DataTable12_1  ;; 0x400ff100
   \   0000003C   0x.... 0x....      BL       gpio_init
     95            
     96            return(status);          
   \   00000040   0x0020             MOVS     R0,R4
   \   00000042   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000044   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
     97          }
     98          

   \                                 In section .text, align 2, keep-with-next
     99          void power_off()
    100          {
   \                     power_off: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    101            CE_clr;
   \   00000002   0x2300             MOVS     R3,#+0
   \   00000004   0x2201             MOVS     R2,#+1
   \   00000006   0x210C             MOVS     R1,#+12
   \   00000008   0x....             LDR.N    R0,??DataTable12  ;; 0x400ff000
   \   0000000A   0x.... 0x....      BL       gpio_init
    102            SPI_RW_Reg(WRITE_REG + CONFIG, 0x0D); 
   \   0000000E   0x210D             MOVS     R1,#+13
   \   00000010   0x2020             MOVS     R0,#+32
   \   00000012   0x.... 0x....      BL       SPI_RW_Reg
    103            CE_set;
   \   00000016   0x2301             MOVS     R3,#+1
   \   00000018   0x2201             MOVS     R2,#+1
   \   0000001A   0x210C             MOVS     R1,#+12
   \   0000001C   0x....             LDR.N    R0,??DataTable12  ;; 0x400ff000
   \   0000001E   0x.... 0x....      BL       gpio_init
    104            Delay_us(20);
   \   00000022   0x2014             MOVS     R0,#+20
   \   00000024   0x.... 0x....      BL       Delay_us
    105          }
   \   00000028   0xBD01             POP      {R0,PC}          ;; return
    106          

   \                                 In section .text, align 2, keep-with-next
    107          void ifnnrf_rx_mode(void)
    108          {
   \                     ifnnrf_rx_mode: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    109            power_off();
   \   00000002   0x.... 0x....      BL       power_off
    110            
    111            CE_clr;
   \   00000006   0x2300             MOVS     R3,#+0
   \   00000008   0x2201             MOVS     R2,#+1
   \   0000000A   0x210C             MOVS     R1,#+12
   \   0000000C   0x....             LDR.N    R0,??DataTable12  ;; 0x400ff000
   \   0000000E   0x.... 0x....      BL       gpio_init
    112            SPI_Write_Buf(WRITE_REG + RX_ADDR_P0, TX_ADDRESS, TX_ADR_WIDTH); // Use the same address on the RX device as the TX device
   \   00000012   0x2205             MOVS     R2,#+5
   \   00000014   0x....             LDR.N    R1,??DataTable12_3
   \   00000016   0x202A             MOVS     R0,#+42
   \   00000018   0x.... 0x....      BL       SPI_Write_Buf
    113            
    114            SPI_RW_Reg(WRITE_REG + EN_AA, 0x01);      // Enable Auto.Ack:Pipe0
   \   0000001C   0x2101             MOVS     R1,#+1
   \   0000001E   0x2021             MOVS     R0,#+33
   \   00000020   0x.... 0x....      BL       SPI_RW_Reg
    115            SPI_RW_Reg(WRITE_REG + EN_RXADDR, 0x01);  // Enable Pipe0
   \   00000024   0x2101             MOVS     R1,#+1
   \   00000026   0x2022             MOVS     R0,#+34
   \   00000028   0x.... 0x....      BL       SPI_RW_Reg
    116            SPI_RW_Reg(WRITE_REG + RF_CH, 40);        // Select RF channel 40
   \   0000002C   0x2128             MOVS     R1,#+40
   \   0000002E   0x2025             MOVS     R0,#+37
   \   00000030   0x.... 0x....      BL       SPI_RW_Reg
    117            SPI_RW_Reg(WRITE_REG + RX_PW_P0, TX_PLOAD_WIDTH); // Select same RX payload width as TX Payload width
   \   00000034   0x2120             MOVS     R1,#+32
   \   00000036   0x2031             MOVS     R0,#+49
   \   00000038   0x.... 0x....      BL       SPI_RW_Reg
    118            SPI_RW_Reg(WRITE_REG + RF_SETUP, 0x0f);   // TX_PWR:0dBm, Datarate:2Mbps, LNA:HCURR
   \   0000003C   0x210F             MOVS     R1,#+15
   \   0000003E   0x2026             MOVS     R0,#+38
   \   00000040   0x.... 0x....      BL       SPI_RW_Reg
    119            SPI_RW_Reg(WRITE_REG + CONFIG, 0x0f);     // Set PWR_UP bit, enable CRC(2 bytes) & Prim:RX. RX_DR enabled..
   \   00000044   0x210F             MOVS     R1,#+15
   \   00000046   0x2020             MOVS     R0,#+32
   \   00000048   0x.... 0x....      BL       SPI_RW_Reg
    120            CE_clr; // Set CE pin high to enable RX device
   \   0000004C   0x2300             MOVS     R3,#+0
   \   0000004E   0x2201             MOVS     R2,#+1
   \   00000050   0x210C             MOVS     R1,#+12
   \   00000052   0x....             LDR.N    R0,??DataTable12  ;; 0x400ff000
   \   00000054   0x.... 0x....      BL       gpio_init
    121          
    122            //  This device is now ready to receive one packet of 16 bytes payload from a TX device sending to address
    123            //  '3443101001', with auto acknowledgment, retransmit count of 10, RF channel 40 and datarate = 2Mbps.
    124          }
   \   00000058   0xBD01             POP      {R0,PC}          ;; return
    125          

   \                                 In section .text, align 2, keep-with-next
    126          void ifnnrf_tx_mode(void)
    127          {
   \                     ifnnrf_tx_mode: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    128            power_off();
   \   00000002   0x.... 0x....      BL       power_off
    129            CE_clr;
   \   00000006   0x2300             MOVS     R3,#+0
   \   00000008   0x2201             MOVS     R2,#+1
   \   0000000A   0x210C             MOVS     R1,#+12
   \   0000000C   0x....             LDR.N    R0,??DataTable12  ;; 0x400ff000
   \   0000000E   0x.... 0x....      BL       gpio_init
    130            SPI_Write_Buf(WRITE_REG + TX_ADDR, TX_ADDRESS, TX_ADR_WIDTH);    // Writes TX_Address to nRF24L01
   \   00000012   0x2205             MOVS     R2,#+5
   \   00000014   0x....             LDR.N    R1,??DataTable12_3
   \   00000016   0x2030             MOVS     R0,#+48
   \   00000018   0x.... 0x....      BL       SPI_Write_Buf
    131            SPI_Write_Buf(WRITE_REG + RX_ADDR_P0, TX_ADDRESS, TX_ADR_WIDTH); // RX_Addr0 same as TX_Adr for Auto.Ack
   \   0000001C   0x2205             MOVS     R2,#+5
   \   0000001E   0x....             LDR.N    R1,??DataTable12_3
   \   00000020   0x202A             MOVS     R0,#+42
   \   00000022   0x.... 0x....      BL       SPI_Write_Buf
    132            SPI_Write_Buf(WR_TX_PLOAD, tx_buf, TX_PLOAD_WIDTH); // Writes data to TX payload
   \   00000026   0x2220             MOVS     R2,#+32
   \   00000028   0x....             LDR.N    R1,??DataTable12_4
   \   0000002A   0x20A0             MOVS     R0,#+160
   \   0000002C   0x.... 0x....      BL       SPI_Write_Buf
    133          
    134            SPI_RW_Reg(WRITE_REG + EN_AA, 0x01);      // Enable Auto.Ack:Pipe0
   \   00000030   0x2101             MOVS     R1,#+1
   \   00000032   0x2021             MOVS     R0,#+33
   \   00000034   0x.... 0x....      BL       SPI_RW_Reg
    135            SPI_RW_Reg(WRITE_REG + EN_RXADDR, 0x01);  // Enable Pipe0
   \   00000038   0x2101             MOVS     R1,#+1
   \   0000003A   0x2022             MOVS     R0,#+34
   \   0000003C   0x.... 0x....      BL       SPI_RW_Reg
    136            SPI_RW_Reg(WRITE_REG + SETUP_RETR, 0x1a); // 500us + 86us, 10 retrans...
   \   00000040   0x211A             MOVS     R1,#+26
   \   00000042   0x2024             MOVS     R0,#+36
   \   00000044   0x.... 0x....      BL       SPI_RW_Reg
    137            SPI_RW_Reg(WRITE_REG + RF_CH, 40);        // Select RF channel 40
   \   00000048   0x2128             MOVS     R1,#+40
   \   0000004A   0x2025             MOVS     R0,#+37
   \   0000004C   0x.... 0x....      BL       SPI_RW_Reg
    138            SPI_RW_Reg(WRITE_REG + RF_SETUP, 0x07);   // TX_PWR:0dBm, Datarate:2Mbps, LNA:HCURR
   \   00000050   0x2107             MOVS     R1,#+7
   \   00000052   0x2026             MOVS     R0,#+38
   \   00000054   0x.... 0x....      BL       SPI_RW_Reg
    139            SPI_RW_Reg(WRITE_REG + CONFIG, 0x0e);     // Set PWR_UP bit, enable CRC(2 bytes) & Prim:TX. MAX_RT & TX_DS enabled..
   \   00000058   0x210E             MOVS     R1,#+14
   \   0000005A   0x2020             MOVS     R0,#+32
   \   0000005C   0x.... 0x....      BL       SPI_RW_Reg
    140            CE_set;
   \   00000060   0x2301             MOVS     R3,#+1
   \   00000062   0x2201             MOVS     R2,#+1
   \   00000064   0x210C             MOVS     R1,#+12
   \   00000066   0x....             LDR.N    R0,??DataTable12  ;; 0x400ff000
   \   00000068   0x.... 0x....      BL       gpio_init
    141          }
   \   0000006C   0xBD01             POP      {R0,PC}          ;; return
    142          

   \                                 In section .text, align 2, keep-with-next
    143          void SPI_CLR_Reg(uint8 R_T)
    144          {
   \                     SPI_CLR_Reg: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    145            CSN_clr; 
   \   00000004   0x2300             MOVS     R3,#+0
   \   00000006   0x2201             MOVS     R2,#+1
   \   00000008   0x2102             MOVS     R1,#+2
   \   0000000A   0x....             LDR.N    R0,??DataTable12_1  ;; 0x400ff100
   \   0000000C   0x.... 0x....      BL       gpio_init
    146            if(R_T==1)               
   \   00000010   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000012   0x2C01             CMP      R4,#+1
   \   00000014   0xD103             BNE.N    ??SPI_CLR_Reg_0
    147            SPI_RW(FLUSH_TX);            
   \   00000016   0x20E1             MOVS     R0,#+225
   \   00000018   0x.... 0x....      BL       SPI_RW
   \   0000001C   0xE002             B.N      ??SPI_CLR_Reg_1
    148            else
    149            SPI_RW(FLUSH_RX);            
   \                     ??SPI_CLR_Reg_0: (+1)
   \   0000001E   0x20E2             MOVS     R0,#+226
   \   00000020   0x.... 0x....      BL       SPI_RW
    150            CSN_set;                   
   \                     ??SPI_CLR_Reg_1: (+1)
   \   00000024   0x2301             MOVS     R3,#+1
   \   00000026   0x2201             MOVS     R2,#+1
   \   00000028   0x2102             MOVS     R1,#+2
   \   0000002A   0x....             LDR.N    R0,??DataTable12_1  ;; 0x400ff100
   \   0000002C   0x.... 0x....      BL       gpio_init
    151          }
   \   00000030   0xBD10             POP      {R4,PC}          ;; return
    152          

   \                                 In section .text, align 2, keep-with-next
    153          void ifnnrf_CLERN_ALL()
    154          {
   \                     ifnnrf_CLERN_ALL: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    155            SPI_CLR_Reg(0);
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x.... 0x....      BL       SPI_CLR_Reg
    156            SPI_CLR_Reg(1);
   \   00000008   0x2001             MOVS     R0,#+1
   \   0000000A   0x.... 0x....      BL       SPI_CLR_Reg
    157            SPI_RW_Reg(WRITE_REG+STATUS,0xff);
   \   0000000E   0x21FF             MOVS     R1,#+255
   \   00000010   0x2027             MOVS     R0,#+39
   \   00000012   0x.... 0x....      BL       SPI_RW_Reg
    158            gpio_init(PORTD , 5, 0, 1);//IRQ=1;
   \   00000016   0x2301             MOVS     R3,#+1
   \   00000018   0x2200             MOVS     R2,#+0
   \   0000001A   0x2105             MOVS     R1,#+5
   \   0000001C   0x....             LDR.N    R0,??DataTable12_5  ;; 0x400ff0c0
   \   0000001E   0x.... 0x....      BL       gpio_init
    159          }
   \   00000022   0xBD01             POP      {R0,PC}          ;; return
    160          

   \                                 In section .text, align 2, keep-with-next
    161          uint8 NRF24L01_Check()
    162          {
   \                     NRF24L01_Check: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
    163            uint8 buf[5]={0XA5,0XA5,0XA5,0XA5,0XA5};
   \   00000004   0xA800             ADD      R0,SP,#+0
   \   00000006   0x....             LDR.N    R1,??DataTable12_6
   \   00000008   0xC90C             LDM      R1!,{R2,R3}
   \   0000000A   0xC00C             STM      R0!,{R2,R3}
   \   0000000C   0x3908             SUBS     R1,R1,#+8
   \   0000000E   0x3808             SUBS     R0,R0,#+8
    164            uint8 i;
    165            //SPI2_SetSpeed(SPI_BaudRatePrescaler_4);   	 
    166            SPI_Write_Buf(WRITE_REG+TX_ADDR,buf,5);
   \   00000010   0x2205             MOVS     R2,#+5
   \   00000012   0xA900             ADD      R1,SP,#+0
   \   00000014   0x2030             MOVS     R0,#+48
   \   00000016   0x.... 0x....      BL       SPI_Write_Buf
    167            SPI_Read_Buf(TX_ADDR,buf,5); 
   \   0000001A   0x2205             MOVS     R2,#+5
   \   0000001C   0xA900             ADD      R1,SP,#+0
   \   0000001E   0x2010             MOVS     R0,#+16
   \   00000020   0x.... 0x....      BL       SPI_Read_Buf
    168            for(i=0;i<5;i++)
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0xE000             B.N      ??NRF24L01_Check_0
   \                     ??NRF24L01_Check_1: (+1)
   \   00000028   0x1C40             ADDS     R0,R0,#+1
   \                     ??NRF24L01_Check_0: (+1)
   \   0000002A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002C   0x2805             CMP      R0,#+5
   \   0000002E   0xDA04             BGE.N    ??NRF24L01_Check_2
    169              if(buf[i]!=0XA5) break;	 							   
   \   00000030   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000032   0xA900             ADD      R1,SP,#+0
   \   00000034   0x5C41             LDRB     R1,[R0, R1]
   \   00000036   0x29A5             CMP      R1,#+165
   \   00000038   0xD0F6             BEQ.N    ??NRF24L01_Check_1
    170            if(i!=5)return 1;	
   \                     ??NRF24L01_Check_2: (+1)
   \   0000003A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000003C   0x2805             CMP      R0,#+5
   \   0000003E   0xD001             BEQ.N    ??NRF24L01_Check_3
   \   00000040   0x2001             MOVS     R0,#+1
   \   00000042   0xE000             B.N      ??NRF24L01_Check_4
    171            return 0;		 
   \                     ??NRF24L01_Check_3: (+1)
   \   00000044   0x2000             MOVS     R0,#+0
   \                     ??NRF24L01_Check_4: (+1)
   \   00000046   0xBD0E             POP      {R1-R3,PC}       ;; return
    172          }
    173          

   \                                 In section .text, align 2, keep-with-next
    174          uint8 NRF24L01_RxPacket(uint8 *rxbuf)
    175          {
   \                     NRF24L01_RxPacket: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    176            uint8 sta;		    							   
    177            //SPI2_SetSpeed(SPI_BaudRatePrescaler_8);    
    178            sta=SPI_Read(STATUS);      	 
   \   00000004   0x2007             MOVS     R0,#+7
   \   00000006   0x.... 0x....      BL       SPI_Read
   \   0000000A   0x0005             MOVS     R5,R0
    179            SPI_RW_Reg(WRITE_REG+STATUS,sta); 
   \   0000000C   0x0029             MOVS     R1,R5
   \   0000000E   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000010   0x2027             MOVS     R0,#+39
   \   00000012   0x.... 0x....      BL       SPI_RW_Reg
    180            if(sta&RX_OK)
   \   00000016   0x0668             LSLS     R0,R5,#+25
   \   00000018   0xD50A             BPL.N    ??NRF24L01_RxPacket_0
    181            {
    182              SPI_Read_Buf(RD_RX_PLOAD,rxbuf,RX_PLOAD_WIDTH);
   \   0000001A   0x220A             MOVS     R2,#+10
   \   0000001C   0x0021             MOVS     R1,R4
   \   0000001E   0x2061             MOVS     R0,#+97
   \   00000020   0x.... 0x....      BL       SPI_Read_Buf
    183              SPI_RW_Reg(FLUSH_RX,0xff); 
   \   00000024   0x21FF             MOVS     R1,#+255
   \   00000026   0x20E2             MOVS     R0,#+226
   \   00000028   0x.... 0x....      BL       SPI_RW_Reg
    184              return 0; 
   \   0000002C   0x2000             MOVS     R0,#+0
   \   0000002E   0xE000             B.N      ??NRF24L01_RxPacket_1
    185            }	
    186            return 1;
   \                     ??NRF24L01_RxPacket_0: (+1)
   \   00000030   0x2001             MOVS     R0,#+1
   \                     ??NRF24L01_RxPacket_1: (+1)
   \   00000032   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    187          }	
    188          

   \                                 In section .text, align 2, keep-with-next
    189          void NRF24L01_RX_Mode(void)
    190          {
   \                     NRF24L01_RX_Mode: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    191            CE_clr;  
   \   00000002   0x2300             MOVS     R3,#+0
   \   00000004   0x2201             MOVS     R2,#+1
   \   00000006   0x210C             MOVS     R1,#+12
   \   00000008   0x....             LDR.N    R0,??DataTable12  ;; 0x400ff000
   \   0000000A   0x.... 0x....      BL       gpio_init
    192            SPI_Write_Buf(WRITE_REG+RX_ADDR_P0,(uint8*)RX_ADDRESS,RX_ADR_WIDTH);
   \   0000000E   0x2205             MOVS     R2,#+5
   \   00000010   0x....             LDR.N    R1,??DataTable12_7
   \   00000012   0x202A             MOVS     R0,#+42
   \   00000014   0x.... 0x....      BL       SPI_Write_Buf
    193            
    194            SPI_RW_Reg(WRITE_REG+EN_AA,0x01);        
   \   00000018   0x2101             MOVS     R1,#+1
   \   0000001A   0x2021             MOVS     R0,#+33
   \   0000001C   0x.... 0x....      BL       SPI_RW_Reg
    195            SPI_RW_Reg(WRITE_REG+EN_RXADDR,0x01);  	 
   \   00000020   0x2101             MOVS     R1,#+1
   \   00000022   0x2022             MOVS     R0,#+34
   \   00000024   0x.... 0x....      BL       SPI_RW_Reg
    196            SPI_RW_Reg(WRITE_REG+RF_CH,40);	    		  
   \   00000028   0x2128             MOVS     R1,#+40
   \   0000002A   0x2025             MOVS     R0,#+37
   \   0000002C   0x.... 0x....      BL       SPI_RW_Reg
    197            SPI_RW_Reg(WRITE_REG+RX_PW_P0,RX_PLOAD_WIDTH); 	    
   \   00000030   0x210A             MOVS     R1,#+10
   \   00000032   0x2031             MOVS     R0,#+49
   \   00000034   0x.... 0x....      BL       SPI_RW_Reg
    198            SPI_RW_Reg(WRITE_REG+RF_SETUP,0x0f);  
   \   00000038   0x210F             MOVS     R1,#+15
   \   0000003A   0x2026             MOVS     R0,#+38
   \   0000003C   0x.... 0x....      BL       SPI_RW_Reg
    199            SPI_RW_Reg(WRITE_REG+CONFIG, 0x0f);
   \   00000040   0x210F             MOVS     R1,#+15
   \   00000042   0x2020             MOVS     R0,#+32
   \   00000044   0x.... 0x....      BL       SPI_RW_Reg
    200            CE_set;
   \   00000048   0x2301             MOVS     R3,#+1
   \   0000004A   0x2201             MOVS     R2,#+1
   \   0000004C   0x210C             MOVS     R1,#+12
   \   0000004E   0x....             LDR.N    R0,??DataTable12  ;; 0x400ff000
   \   00000050   0x.... 0x....      BL       gpio_init
    201          }
   \   00000054   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12:
   \   00000000   0x400FF000         DC32     0x400ff000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_1:
   \   00000000   0x400FF100         DC32     0x400ff100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_2:
   \   00000000   0x400FF040         DC32     0x400ff040

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_3:
   \   00000000   0x........         DC32     TX_ADDRESS

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_4:
   \   00000000   0x........         DC32     tx_buf

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_5:
   \   00000000   0x400FF0C0         DC32     0x400ff0c0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_6:
   \   00000000   0x........         DC32     `?<Constant {165, 165, 165, 165, 165}>`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_7:
   \   00000000   0x........         DC32     RX_ADDRESS

   \                                 In section .rodata, align 4
   \                     `?<Constant {165, 165, 165, 165, 165}>`:
   \   00000000   0xA5 0xA5          DC8 165, 165, 165, 165, 165, 0, 0, 0
   \              0xA5 0xA5    
   \              0xA5 0x00    
   \              0x00 0x00    

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   NRF24L01_Check
        16   -> SPI_Read_Buf
        16   -> SPI_Write_Buf
       8   NRF24L01_RX_Mode
         8   -> SPI_RW_Reg
         8   -> SPI_Write_Buf
         8   -> gpio_init
      16   NRF24L01_RxPacket
        16   -> SPI_RW_Reg
        16   -> SPI_Read
        16   -> SPI_Read_Buf
       8   SPI_CLR_Reg
         8   -> SPI_RW
         8   -> gpio_init
      16   SPI_RW
        16   -> gpio_ctrl
        16   -> gpio_init
        16   -> gpio_read
      16   SPI_RW_Reg
        16   -> SPI_RW
        16   -> gpio_init
       8   SPI_Read
         8   -> SPI_RW
         8   -> gpio_init
      24   SPI_Read_Buf
        24   -> SPI_RW
        24   -> gpio_init
      24   SPI_Write_Buf
        24   -> SPI_RW
        24   -> gpio_init
       8   ifnnrf_CLERN_ALL
         8   -> SPI_CLR_Reg
         8   -> SPI_RW_Reg
         8   -> gpio_init
       8   ifnnrf_rx_mode
         8   -> SPI_RW_Reg
         8   -> SPI_Write_Buf
         8   -> gpio_init
         8   -> power_off
       8   ifnnrf_tx_mode
         8   -> SPI_RW_Reg
         8   -> SPI_Write_Buf
         8   -> gpio_init
         8   -> power_off
       8   init_nrf24l01_io
         8   -> gpio_init
       8   power_off
         8   -> Delay_us
         8   -> SPI_RW_Reg
         8   -> gpio_init


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       8  ?<Constant {165, 165, 165, 165, 165}>
       4  ??DataTable12
       4  ??DataTable12_1
       4  ??DataTable12_2
       4  ??DataTable12_3
       4  ??DataTable12_4
       4  ??DataTable12_5
       4  ??DataTable12_6
       4  ??DataTable12_7
      72  NRF24L01_Check
      86  NRF24L01_RX_Mode
      52  NRF24L01_RxPacket
       8  RX_ADDRESS
      50  SPI_CLR_Reg
      70  SPI_RW
      54  SPI_RW_Reg
      50  SPI_Read
      72  SPI_Read_Buf
      70  SPI_Write_Buf
       8  TX_ADDRESS
       1  flag
      36  ifnnrf_CLERN_ALL
      90  ifnnrf_rx_mode
     110  ifnnrf_tx_mode
      82  init_nrf24l01_io
      42  power_off
      32  rx_buf
      32  tx_buf

 
  65 bytes in section .bss
  16 bytes in section .data
   8 bytes in section .rodata
 968 bytes in section .text
 
 968 bytes of CODE  memory
   8 bytes of CONST memory
  81 bytes of DATA  memory

Errors: none
Warnings: none
