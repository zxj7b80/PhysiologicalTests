###############################################################################
#
# IAR ANSI C/C++ Compiler V7.10.1.6676/W32 for ARM        08/Apr/2015  15:15:26
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\Administrator\Desktop\PhysiologicalTests\src\Sources\C\Component_C\UpMonitor.c
#    Command line =  
#        C:\Users\Administrator\Desktop\PhysiologicalTests\src\Sources\C\Component_C\UpMonitor.c
#        -D IAR -D TWR_K60N512 -lCN
#        C:\Users\Administrator\Desktop\PhysiologicalTests\bin\Flash\List\ -lB
#        C:\Users\Administrator\Desktop\PhysiologicalTests\bin\Flash\List\ -o
#        C:\Users\Administrator\Desktop\PhysiologicalTests\bin\Flash\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=None --dlib_config "D:\MyProgramFiles\iar for
#        arm v7.1\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\Administrator\Desktop\PhysiologicalTests\src\Sources\H\ -I
#        C:\Users\Administrator\Desktop\PhysiologicalTests\src\Sources\H\Component_H\
#        -I
#        C:\Users\Administrator\Desktop\PhysiologicalTests\src\Sources\H\Frame_H\
#        -Ol --use_c++_inline
#    List file    =  
#        C:\Users\Administrator\Desktop\PhysiologicalTests\bin\Flash\List\UpMonitor.lst
#    Object file  =  
#        C:\Users\Administrator\Desktop\PhysiologicalTests\bin\Flash\Obj\UpMonitor.o
#
###############################################################################

C:\Users\Administrator\Desktop\PhysiologicalTests\src\Sources\C\Component_C\UpMonitor.c
      1          #include "includes.h"
      2          #include "UpMonitor.h"
      3          //----------------------------给CCDView发送图像------------------------//

   \                                 In section .bss, align 4
      4          int16 OutData[4] = { 0 };//虚拟示波器输出
   \                     OutData:
   \   00000000                      DS8 8
      5          extern  int     OFF_X,OFF_Y,OFF_Z;
      6                  

   \                                 In section .text, align 2, keep-with-next
      7          void SendImageData(uint8 * ImageData)
      8          {
   \                     SendImageData: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
      9              unsigned char i;
     10              unsigned char crc = 0;
   \   00000004   0x2600             MOVS     R6,#+0
     11              /* Send Data */
     12              uart_send1(UART3,'*');
   \   00000006   0x212A             MOVS     R1,#+42
   \   00000008   0x....             LDR.N    R0,??DataTable5  ;; 0x4006d000
   \   0000000A   0x.... 0x....      BL       uart_send1
     13              uart_send1(UART3,'L');
   \   0000000E   0x214C             MOVS     R1,#+76
   \   00000010   0x....             LDR.N    R0,??DataTable5  ;; 0x4006d000
   \   00000012   0x.... 0x....      BL       uart_send1
     14              uart_send1(UART3,'D');
   \   00000016   0x2144             MOVS     R1,#+68
   \   00000018   0x....             LDR.N    R0,??DataTable5  ;; 0x4006d000
   \   0000001A   0x.... 0x....      BL       uart_send1
     15          
     16              SendHex(0);
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0x.... 0x....      BL       SendHex
     17              SendHex(0);
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0x.... 0x....      BL       SendHex
     18              SendHex(0);
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0x.... 0x....      BL       SendHex
     19              SendHex(0);
   \   00000030   0x2000             MOVS     R0,#+0
   \   00000032   0x.... 0x....      BL       SendHex
     20          
     21              for(i=0; i<128; i++)
   \   00000036   0x2500             MOVS     R5,#+0
   \   00000038   0xE004             B.N      ??SendImageData_0
     22              {
     23                  SendHex(*ImageData ++);
   \                     ??SendImageData_1: (+1)
   \   0000003A   0x7820             LDRB     R0,[R4, #+0]
   \   0000003C   0x.... 0x....      BL       SendHex
   \   00000040   0x1C64             ADDS     R4,R4,#+1
     24              }
   \   00000042   0x1C6D             ADDS     R5,R5,#+1
   \                     ??SendImageData_0: (+1)
   \   00000044   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000046   0x2D80             CMP      R5,#+128
   \   00000048   0xDBF7             BLT.N    ??SendImageData_1
     25              SendHex(crc);
   \   0000004A   0x0030             MOVS     R0,R6
   \   0000004C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000004E   0x.... 0x....      BL       SendHex
     26              uart_send1(UART3,'#');
   \   00000052   0x2123             MOVS     R1,#+35
   \   00000054   0x....             LDR.N    R0,??DataTable5  ;; 0x4006d000
   \   00000056   0x.... 0x....      BL       uart_send1
     27          }
   \   0000005A   0xBD70             POP      {R4-R6,PC}       ;; return
     28          

   \                                 In section .text, align 2, keep-with-next
     29          void SendHex(unsigned char hex)
     30          {
   \                     SendHex: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
     31            unsigned char temp;
     32            temp = hex >> 4;
   \   00000004   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000006   0x0920             LSRS     R0,R4,#+4
     33            if(temp < 10)
   \   00000008   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000A   0x280A             CMP      R0,#+10
   \   0000000C   0xDA06             BGE.N    ??SendHex_0
     34            {
     35             uart_send1(UART3,temp + '0');
   \   0000000E   0xF110 0x0130      ADDS     R1,R0,#+48
   \   00000012   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000014   0x....             LDR.N    R0,??DataTable5  ;; 0x4006d000
   \   00000016   0x.... 0x....      BL       uart_send1
   \   0000001A   0xE005             B.N      ??SendHex_1
     36            }
     37            else
     38            {
     39             uart_send1(UART3,temp - 10 + 'A');
   \                     ??SendHex_0: (+1)
   \   0000001C   0xF110 0x0137      ADDS     R1,R0,#+55
   \   00000020   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000022   0x....             LDR.N    R0,??DataTable5  ;; 0x4006d000
   \   00000024   0x.... 0x....      BL       uart_send1
     40            }
     41            temp = hex & 0x0F;
   \                     ??SendHex_1: (+1)
   \   00000028   0xF014 0x000F      ANDS     R0,R4,#0xF
     42            if(temp < 10)
   \   0000002C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002E   0x280A             CMP      R0,#+10
   \   00000030   0xDA06             BGE.N    ??SendHex_2
     43            {
     44             uart_send1(UART3,temp + '0');
   \   00000032   0xF110 0x0130      ADDS     R1,R0,#+48
   \   00000036   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000038   0x....             LDR.N    R0,??DataTable5  ;; 0x4006d000
   \   0000003A   0x.... 0x....      BL       uart_send1
   \   0000003E   0xE005             B.N      ??SendHex_3
     45            }
     46            else
     47            {
     48             uart_send1(UART3,temp - 10 + 'A');
   \                     ??SendHex_2: (+1)
   \   00000040   0xF110 0x0137      ADDS     R1,R0,#+55
   \   00000044   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000046   0x....             LDR.N    R0,??DataTable5  ;; 0x4006d000
   \   00000048   0x.... 0x....      BL       uart_send1
     49            }
     50          }
   \                     ??SendHex_3: (+1)
   \   0000004C   0xBD10             POP      {R4,PC}          ;; return
     51          
     52          
     53          /****************************虚拟示波器模块******************************/

   \                                 In section .text, align 2, keep-with-next
     54          void virtual_scope_show(void)
     55          {
     56                OutData[0]=OFF_Y;
   \                     virtual_scope_show: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable5_1
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x....             LDR.N    R1,??DataTable5_2
   \   00000006   0x8008             STRH     R0,[R1, #+0]
     57                //OutData[1]=0;
     58                //OutData[2]=0;
     59                //OutData[3]=0;
     60          }
   \   00000008   0x4770             BX       LR               ;; return
     61          

   \                                 In section .text, align 2, keep-with-next
     62          void serial_Txd()//传输的一帧数据，包括如下的内容
     63          {
   \                     serial_Txd: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB084             SUB      SP,SP,#+16
     64                  uint8 temp[10]={0};
   \   00000004   0xA800             ADD      R0,SP,#+0
   \   00000006   0x2100             MOVS     R1,#+0
   \   00000008   0x2200             MOVS     R2,#+0
   \   0000000A   0x2300             MOVS     R3,#+0
   \   0000000C   0xC00E             STM      R0!,{R1-R3}
   \   0000000E   0x380C             SUBS     R0,R0,#+12
     65                  uint8 i,j;
     66                  //帧头数据
     67                  uart_send1 (UART3, 0xa5);
   \   00000010   0x21A5             MOVS     R1,#+165
   \   00000012   0x....             LDR.N    R0,??DataTable5  ;; 0x4006d000
   \   00000014   0x.... 0x....      BL       uart_send1
     68                  uart_send1 (UART3, 0x5a);
   \   00000018   0x215A             MOVS     R1,#+90
   \   0000001A   0x....             LDR.N    R0,??DataTable5  ;; 0x4006d000
   \   0000001C   0x.... 0x....      BL       uart_send1
     69          	
     70                  //第一条曲线的数据
     71                  for(i=0;i<3;i++)
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0xE019             B.N      ??serial_Txd_0
     72                  {
     73                     temp[i*2]=(int)OutData[i]/10;
   \                     ??serial_Txd_1: (+1)
   \   00000024   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000026   0x....             LDR.N    R1,??DataTable5_2
   \   00000028   0xF931 0x1010      LDRSH    R1,[R1, R0, LSL #+1]
   \   0000002C   0x220A             MOVS     R2,#+10
   \   0000002E   0xFB91 0xF1F2      SDIV     R1,R1,R2
   \   00000032   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000034   0xAA00             ADD      R2,SP,#+0
   \   00000036   0xF802 0x1010      STRB     R1,[R2, R0, LSL #+1]
     74                     temp[i*2+1]=(int)OutData[i]%10;
   \   0000003A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000003C   0x....             LDR.N    R1,??DataTable5_2
   \   0000003E   0xF931 0x1010      LDRSH    R1,[R1, R0, LSL #+1]
   \   00000042   0x220A             MOVS     R2,#+10
   \   00000044   0xFB91 0xF3F2      SDIV     R3,R1,R2
   \   00000048   0xFB02 0x1113      MLS      R1,R2,R3,R1
   \   0000004C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000004E   0xAA00             ADD      R2,SP,#+0
   \   00000050   0xEB12 0x0240      ADDS     R2,R2,R0, LSL #+1
   \   00000054   0x7051             STRB     R1,[R2, #+1]
     75                  }
   \   00000056   0x1C40             ADDS     R0,R0,#+1
   \                     ??serial_Txd_0: (+1)
   \   00000058   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000005A   0x2803             CMP      R0,#+3
   \   0000005C   0xDBE2             BLT.N    ??serial_Txd_1
     76                  
     77                 for(j=0;j<6;j++)
   \   0000005E   0x2400             MOVS     R4,#+0
   \   00000060   0xE006             B.N      ??serial_Txd_2
     78                 {
     79                    uart_send1 (UART3, temp[j]);
   \                     ??serial_Txd_3: (+1)
   \   00000062   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000064   0xA800             ADD      R0,SP,#+0
   \   00000066   0x5C21             LDRB     R1,[R4, R0]
   \   00000068   0x....             LDR.N    R0,??DataTable5  ;; 0x4006d000
   \   0000006A   0x.... 0x....      BL       uart_send1
     80                 }
   \   0000006E   0x1C64             ADDS     R4,R4,#+1
   \                     ??serial_Txd_2: (+1)
   \   00000070   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000072   0x2C06             CMP      R4,#+6
   \   00000074   0xDBF5             BLT.N    ??serial_Txd_3
     81                  delay_ms(10);
   \   00000076   0x200A             MOVS     R0,#+10
   \   00000078   0x.... 0x....      BL       delay_ms
     82          }
   \   0000007C   0xBD1F             POP      {R0-R4,PC}       ;; return
     83          
     84          

   \                                 In section .text, align 2, keep-with-next
     85          unsigned short CRC_CHECK(unsigned char *Buf, unsigned char CRC_CNT)
     86          {
   \                     CRC_CHECK: (+1)
   \   00000000   0xB430             PUSH     {R4,R5}
     87              unsigned short CRC_Temp;
     88              unsigned char i,j;
     89              CRC_Temp = 0xffff;
   \   00000002   0xF64F 0x72FF      MOVW     R2,#+65535
     90          
     91              for (i=0;i<CRC_CNT; i++)
   \   00000006   0x2300             MOVS     R3,#+0
   \   00000008   0xE000             B.N      ??CRC_CHECK_0
   \                     ??CRC_CHECK_1: (+1)
   \   0000000A   0x1C5B             ADDS     R3,R3,#+1
   \                     ??CRC_CHECK_0: (+1)
   \   0000000C   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   0000000E   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000010   0x428B             CMP      R3,R1
   \   00000012   0xD213             BCS.N    ??CRC_CHECK_2
     92              {
     93                  CRC_Temp ^= Buf[i];
   \   00000014   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000016   0x5C1C             LDRB     R4,[R3, R0]
   \   00000018   0x4062             EORS     R2,R4,R2
     94                  for (j=0;j<8;j++)
   \   0000001A   0x2400             MOVS     R4,#+0
   \   0000001C   0xE002             B.N      ??CRC_CHECK_3
     95                  {
     96                      if (CRC_Temp & 0x01)
     97                          CRC_Temp = (CRC_Temp >>1 ) ^ 0xa001;
     98                      else
     99                          CRC_Temp = CRC_Temp >> 1;
   \                     ??CRC_CHECK_4: (+1)
   \   0000001E   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000020   0x0852             LSRS     R2,R2,#+1
   \                     ??CRC_CHECK_5: (+1)
   \   00000022   0x1C64             ADDS     R4,R4,#+1
   \                     ??CRC_CHECK_3: (+1)
   \   00000024   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000026   0x2C08             CMP      R4,#+8
   \   00000028   0xDAEF             BGE.N    ??CRC_CHECK_1
   \   0000002A   0x07D5             LSLS     R5,R2,#+31
   \   0000002C   0xD5F7             BPL.N    ??CRC_CHECK_4
   \   0000002E   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000030   0x0852             LSRS     R2,R2,#+1
   \   00000032   0xF482 0x4220      EOR      R2,R2,#0xA000
   \   00000036   0xF092 0x0201      EORS     R2,R2,#0x1
   \   0000003A   0xE7F2             B.N      ??CRC_CHECK_5
    100                  }
    101              }
    102              return(CRC_Temp);
   \                     ??CRC_CHECK_2: (+1)
   \   0000003C   0x0010             MOVS     R0,R2
   \   0000003E   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000040   0xBC30             POP      {R4,R5}
   \   00000042   0x4770             BX       LR               ;; return
    103          }
    104          
    105          

   \                                 In section .text, align 2, keep-with-next
    106          void OutPut_Data(void)
    107          {
   \                     OutPut_Data: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB08C             SUB      SP,SP,#+48
    108            int temp[4] = {0};
   \   00000004   0xA807             ADD      R0,SP,#+28
   \   00000006   0x2110             MOVS     R1,#+16
   \   00000008   0x.... 0x....      BL       __aeabi_memclr4
    109            unsigned int temp1[4] = {0};
   \   0000000C   0xA803             ADD      R0,SP,#+12
   \   0000000E   0x2110             MOVS     R1,#+16
   \   00000010   0x.... 0x....      BL       __aeabi_memclr4
    110            unsigned char databuf[10] = {0};
   \   00000014   0xA800             ADD      R0,SP,#+0
   \   00000016   0x2100             MOVS     R1,#+0
   \   00000018   0x2200             MOVS     R2,#+0
   \   0000001A   0x2300             MOVS     R3,#+0
   \   0000001C   0xC00E             STM      R0!,{R1-R3}
   \   0000001E   0x380C             SUBS     R0,R0,#+12
    111            unsigned char i;
    112            unsigned short CRC16 = 0;
   \   00000020   0x2000             MOVS     R0,#+0
    113            for(i=0;i<4;i++)
   \   00000022   0x2400             MOVS     R4,#+0
   \   00000024   0xE010             B.N      ??OutPut_Data_0
    114            {
    115              temp[i]  = (int16)OutData[i];
   \                     ??OutPut_Data_1: (+1)
   \   00000026   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000028   0x....             LDR.N    R0,??DataTable5_2
   \   0000002A   0xF930 0x0014      LDRSH    R0,[R0, R4, LSL #+1]
   \   0000002E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000030   0xA907             ADD      R1,SP,#+28
   \   00000032   0xF841 0x0024      STR      R0,[R1, R4, LSL #+2]
    116              temp1[i] = (uint16)temp[i];
   \   00000036   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000038   0xA807             ADD      R0,SP,#+28
   \   0000003A   0xF830 0x0024      LDRH     R0,[R0, R4, LSL #+2]
   \   0000003E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000040   0xA903             ADD      R1,SP,#+12
   \   00000042   0xF841 0x0024      STR      R0,[R1, R4, LSL #+2]
    117            }
   \   00000046   0x1C64             ADDS     R4,R4,#+1
   \                     ??OutPut_Data_0: (+1)
   \   00000048   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000004A   0x2C04             CMP      R4,#+4
   \   0000004C   0xDBEB             BLT.N    ??OutPut_Data_1
    118          
    119            for(i=0;i<4;i++)
   \   0000004E   0x2400             MOVS     R4,#+0
   \   00000050   0xE018             B.N      ??OutPut_Data_2
    120            {
    121              databuf[i*2]   = (int8)(temp1[i]%256);
   \                     ??OutPut_Data_3: (+1)
   \   00000052   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000054   0xA803             ADD      R0,SP,#+12
   \   00000056   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   0000005A   0xF44F 0x7180      MOV      R1,#+256
   \   0000005E   0xFBB0 0xF2F1      UDIV     R2,R0,R1
   \   00000062   0xFB02 0x0211      MLS      R2,R2,R1,R0
   \   00000066   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000068   0xA800             ADD      R0,SP,#+0
   \   0000006A   0xF800 0x2014      STRB     R2,[R0, R4, LSL #+1]
    122              databuf[i*2+1] = (int8)(temp1[i]/256);
   \   0000006E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000070   0xA803             ADD      R0,SP,#+12
   \   00000072   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   00000076   0x0A00             LSRS     R0,R0,#+8
   \   00000078   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000007A   0xA900             ADD      R1,SP,#+0
   \   0000007C   0xEB11 0x0144      ADDS     R1,R1,R4, LSL #+1
   \   00000080   0x7048             STRB     R0,[R1, #+1]
    123            }
   \   00000082   0x1C64             ADDS     R4,R4,#+1
   \                     ??OutPut_Data_2: (+1)
   \   00000084   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000086   0x2C04             CMP      R4,#+4
   \   00000088   0xDBE3             BLT.N    ??OutPut_Data_3
    124          
    125            CRC16 = CRC_CHECK(databuf,8);
   \   0000008A   0x2108             MOVS     R1,#+8
   \   0000008C   0xA800             ADD      R0,SP,#+0
   \   0000008E   0x.... 0x....      BL       CRC_CHECK
    126            databuf[8] = CRC16%256;
   \   00000092   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000094   0xF44F 0x7180      MOV      R1,#+256
   \   00000098   0xFB90 0xF2F1      SDIV     R2,R0,R1
   \   0000009C   0xFB02 0x0211      MLS      R2,R2,R1,R0
   \   000000A0   0xF88D 0x2008      STRB     R2,[SP, #+8]
    127            databuf[9] = CRC16/256;
   \   000000A4   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000A6   0xF44F 0x7180      MOV      R1,#+256
   \   000000AA   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   000000AE   0xF88D 0x0009      STRB     R0,[SP, #+9]
    128          
    129            for(i=0;i<10;i++)
   \   000000B2   0x2400             MOVS     R4,#+0
   \   000000B4   0xE006             B.N      ??OutPut_Data_4
    130            uart_send1 (UART3,databuf[i]);
   \                     ??OutPut_Data_5: (+1)
   \   000000B6   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000B8   0xA800             ADD      R0,SP,#+0
   \   000000BA   0x5C21             LDRB     R1,[R4, R0]
   \   000000BC   0x....             LDR.N    R0,??DataTable5  ;; 0x4006d000
   \   000000BE   0x.... 0x....      BL       uart_send1
   \   000000C2   0x1C64             ADDS     R4,R4,#+1
   \                     ??OutPut_Data_4: (+1)
   \   000000C4   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000C6   0x2C0A             CMP      R4,#+10
   \   000000C8   0xDBF5             BLT.N    ??OutPut_Data_5
    131          }
   \   000000CA   0xB00C             ADD      SP,SP,#+48
   \   000000CC   0xBD10             POP      {R4,PC}          ;; return
    132          
    133          //串口发送数据

   \                                 In section .text, align 2, keep-with-next
    134          void serial_choose()
    135          {
   \                     serial_choose: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    136          
    137              //帧头数据
    138              uart_send1 (UART3, 0xa5);
   \   00000002   0x21A5             MOVS     R1,#+165
   \   00000004   0x....             LDR.N    R0,??DataTable5  ;; 0x4006d000
   \   00000006   0x.... 0x....      BL       uart_send1
    139          
    140              uart_send1 (UART3, 0x5a);
   \   0000000A   0x215A             MOVS     R1,#+90
   \   0000000C   0x....             LDR.N    R0,??DataTable5  ;; 0x4006d000
   \   0000000E   0x.... 0x....      BL       uart_send1
    141          
    142          	//选择的线条
    143          	//此处选择了第一,二,三条线
    144          
    145              uart_send1 (UART3, 0x01);
   \   00000012   0x2101             MOVS     R1,#+1
   \   00000014   0x....             LDR.N    R0,??DataTable5  ;; 0x4006d000
   \   00000016   0x.... 0x....      BL       uart_send1
    146              uart_send1 (UART3, 0x00);
   \   0000001A   0x2100             MOVS     R1,#+0
   \   0000001C   0x....             LDR.N    R0,??DataTable5  ;; 0x4006d000
   \   0000001E   0x.... 0x....      BL       uart_send1
    147              uart_send1 (UART3, 0x00);
   \   00000022   0x2100             MOVS     R1,#+0
   \   00000024   0x....             LDR.N    R0,??DataTable5  ;; 0x4006d000
   \   00000026   0x.... 0x....      BL       uart_send1
    148              uart_send1 (UART3, 0x00);
   \   0000002A   0x2100             MOVS     R1,#+0
   \   0000002C   0x....             LDR.N    R0,??DataTable5  ;; 0x4006d000
   \   0000002E   0x.... 0x....      BL       uart_send1
    149              uart_send1 (UART3, 0x00);
   \   00000032   0x2100             MOVS     R1,#+0
   \   00000034   0x....             LDR.N    R0,??DataTable5  ;; 0x4006d000
   \   00000036   0x.... 0x....      BL       uart_send1
    150              delay_ms(10);
   \   0000003A   0x200A             MOVS     R0,#+10
   \   0000003C   0x.... 0x....      BL       delay_ms
    151          }
   \   00000040   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0x4006D000         DC32     0x4006d000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \   00000000   0x........         DC32     OFF_Y

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \   00000000   0x........         DC32     OutData

   \                                 In section .rodata, align 4
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    

   \                                 In section .rodata, align 4
   \   00000000   0x00000000         DC32 0
   \   00000004   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    

   \                                 In section .rodata, align 4
   \   00000000   0x00000000         DC32 0
   \   00000004   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    

   \                                 In section .rodata, align 4
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   CRC_CHECK
      56   OutPut_Data
        56   -> CRC_CHECK
        56   -> __aeabi_memclr4
        56   -> uart_send1
       8   SendHex
         8   -> uart_send1
      16   SendImageData
        16   -> SendHex
        16   -> uart_send1
      24   serial_Txd
        24   -> delay_ms
        24   -> uart_send1
       8   serial_choose
         8   -> delay_ms
         8   -> uart_send1
       0   virtual_scope_show


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      12  ?<Constant {0}>
      16  ?<Constant {0}>_1
      16  ?<Constant {0}>_2
      12  ?<Constant {0}>_3
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_2
      68  CRC_CHECK
       8  OutData
     206  OutPut_Data
      78  SendHex
      92  SendImageData
     126  serial_Txd
      66  serial_choose
      10  virtual_scope_show

 
   8 bytes in section .bss
  56 bytes in section .rodata
 658 bytes in section .text
 
 658 bytes of CODE  memory
  56 bytes of CONST memory
   8 bytes of DATA  memory

Errors: none
Warnings: none
