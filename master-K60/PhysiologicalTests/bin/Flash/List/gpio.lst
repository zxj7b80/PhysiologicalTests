###############################################################################
#                                                                             #
#                                                       11/Feb/2015  17:06:45 #
# IAR ANSI C/C++ Compiler V6.30.4.23288/W32 EVALUATION for ARM                #
# Copyright 1999-2011 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\MyProgramFiles\IAR V6.3\MyIAR\PhysiologicalTests\src\ #
#                    Sources\C\Component_C\gpio.c                             #
#    Command line =  "D:\MyProgramFiles\IAR V6.3\MyIAR\PhysiologicalTests\src #
#                    \Sources\C\Component_C\gpio.c" -D IAR -D TWR_K60N512     #
#                    -lCN "D:\MyProgramFiles\IAR                              #
#                    V6.3\MyIAR\PhysiologicalTests\bin\Flash\List\" -lB       #
#                    "D:\MyProgramFiles\IAR V6.3\MyIAR\PhysiologicalTests\bin #
#                    \Flash\List\" -o "D:\MyProgramFiles\IAR                  #
#                    V6.3\MyIAR\PhysiologicalTests\bin\Flash\Obj\" --no_cse   #
#                    --no_unroll --no_inline --no_code_motion --no_tbaa       #
#                    --no_clustering --no_scheduling --debug --endian=little  #
#                    --cpu=Cortex-M4 -e --fpu=None --dlib_config              #
#                    "D:\MyProgramFiles\IAR V6.3\arm\INC\c\DLib_Config_Normal #
#                    .h" -I "D:\MyProgramFiles\IAR                            #
#                    V6.3\MyIAR\PhysiologicalTests\src\Sources\H\" -I         #
#                    "D:\MyProgramFiles\IAR V6.3\MyIAR\PhysiologicalTests\src #
#                    \Sources\H\Component_H\" -I "D:\MyProgramFiles\IAR       #
#                    V6.3\MyIAR\PhysiologicalTests\src\Sources\H\Frame_H\"    #
#                    -Ol --use_c++_inline                                     #
#    List file    =  D:\MyProgramFiles\IAR V6.3\MyIAR\PhysiologicalTests\bin\ #
#                    Flash\List\gpio.lst                                      #
#    Object file  =  D:\MyProgramFiles\IAR V6.3\MyIAR\PhysiologicalTests\bin\ #
#                    Flash\Obj\gpio.o                                         #
#                                                                             #
#                                                                             #
###############################################################################

D:\MyProgramFiles\IAR V6.3\MyIAR\PhysiologicalTests\src\Sources\C\Component_C\gpio.c
      1          //-------------------------------------------------------------------------*
      2          // 文件名: gpio.c                                                          *
      3          // 说  明: gpio驱动程序文件                                                *
      4          //-------------------------------------------------------------------------*
      5          
      6          #include "gpio.h"     //包含gpio头文件
      7          
      8          //-------------------------------------------------------------------------*
      9          //函数名: gpio_init                                                        *
     10          //功  能: 初始化gpio                                                       * 
     11          //参  数: port:端口名                                                      *
     12          //        index:指定端口引脚                                               *
     13          //        dir:引脚方向,0=输入,1=输出                                       * 
     14          //        data:初始状态,0=低电平,1=高电平                                  *
     15          //返  回: 无                                                               *
     16          //说  明: 无                                                               *
     17          //-------------------------------------------------------------------------*

   \                                 In section .text, align 2, keep-with-next
     18          void gpio_init(GPIO_MemMapPtr port, int index, int dir,int data)
     19          {
   \                     gpio_init:
   \   00000000   0xB470             PUSH     {R4-R6}
     20               PORT_MemMapPtr p;
     21               switch((uint32)port)
   \   00000002   0x0005             MOVS     R5,R0
   \   00000004   0x....             LDR.N    R6,??DataTable0  ;; 0x400ff000
   \   00000006   0x1BAD             SUBS     R5,R5,R6
   \   00000008   0xD008             BEQ.N    ??gpio_init_0
   \   0000000A   0x3D40             SUBS     R5,R5,#+64
   \   0000000C   0xD008             BEQ.N    ??gpio_init_1
   \   0000000E   0x3D40             SUBS     R5,R5,#+64
   \   00000010   0xD008             BEQ.N    ??gpio_init_2
   \   00000012   0x3D40             SUBS     R5,R5,#+64
   \   00000014   0xD008             BEQ.N    ??gpio_init_3
   \   00000016   0x3D40             SUBS     R5,R5,#+64
   \   00000018   0xD008             BEQ.N    ??gpio_init_4
   \   0000001A   0xE009             B.N      ??gpio_init_5
     22               {
     23               case 0x400FF000u:
     24                   p = PORTA_BASE_PTR;
   \                     ??gpio_init_0:
   \   0000001C   0x....             LDR.N    R4,??DataTable0_1  ;; 0x40049000
     25                   break;
   \   0000001E   0xE007             B.N      ??gpio_init_6
     26               case 0x400FF040u:
     27                   p = PORTB_BASE_PTR;
   \                     ??gpio_init_1:
   \   00000020   0x....             LDR.N    R4,??DataTable0_2  ;; 0x4004a000
     28                   break;
   \   00000022   0xE005             B.N      ??gpio_init_6
     29               case 0x400FF080u:
     30                   p = PORTC_BASE_PTR;
   \                     ??gpio_init_2:
   \   00000024   0x....             LDR.N    R4,??DataTable0_3  ;; 0x4004b000
     31                   break;
   \   00000026   0xE003             B.N      ??gpio_init_6
     32               case 0x400FF0C0u:
     33                   p = PORTD_BASE_PTR;
   \                     ??gpio_init_3:
   \   00000028   0x....             LDR.N    R4,??DataTable0_4  ;; 0x4004c000
     34                   break;
   \   0000002A   0xE001             B.N      ??gpio_init_6
     35               case 0x400FF100u:
     36                   p = PORTE_BASE_PTR;
   \                     ??gpio_init_4:
   \   0000002C   0x....             LDR.N    R4,??DataTable0_5  ;; 0x4004d000
     37                   break;
   \   0000002E   0xE7FF             B.N      ??gpio_init_6
     38               default:
     39                   break;
     40               }
     41               PORT_PCR_REG(p,index)=(0|PORT_PCR_MUX(1));
   \                     ??gpio_init_5:
   \                     ??gpio_init_6:
   \   00000030   0xF44F 0x7580      MOV      R5,#+256
   \   00000034   0xF844 0x5021      STR      R5,[R4, R1, LSL #+2]
     42          
     43               if(dir == 1)//output
   \   00000038   0x2A01             CMP      R2,#+1
   \   0000003A   0xD115             BNE.N    ??gpio_init_7
     44               {
     45              	 GPIO_PDDR_REG(port) |= (1<<index);
   \   0000003C   0x6942             LDR      R2,[R0, #+20]
   \   0000003E   0x2401             MOVS     R4,#+1
   \   00000040   0x408C             LSLS     R4,R4,R1
   \   00000042   0x4322             ORRS     R2,R4,R2
   \   00000044   0x6142             STR      R2,[R0, #+20]
     46              	 if(data == 1)
   \   00000046   0x2B01             CMP      R3,#+1
   \   00000048   0xD106             BNE.N    ??gpio_init_8
     47                     GPIO_PDOR_REG(port) |= (1<<index);
   \   0000004A   0x6802             LDR      R2,[R0, #+0]
   \   0000004C   0x2301             MOVS     R3,#+1
   \   0000004E   0xFA13 0xF101      LSLS     R1,R3,R1
   \   00000052   0x4311             ORRS     R1,R1,R2
   \   00000054   0x6001             STR      R1,[R0, #+0]
   \   00000056   0xE00E             B.N      ??gpio_init_9
     48                   else
     49                     GPIO_PDOR_REG(port) &= ~(1<<index);
   \                     ??gpio_init_8:
   \   00000058   0x6802             LDR      R2,[R0, #+0]
   \   0000005A   0x2301             MOVS     R3,#+1
   \   0000005C   0xFA13 0xF101      LSLS     R1,R3,R1
   \   00000060   0xEA32 0x0101      BICS     R1,R2,R1
   \   00000064   0x6001             STR      R1,[R0, #+0]
   \   00000066   0xE006             B.N      ??gpio_init_9
     50               }       
     51               else
     52                   GPIO_PDDR_REG(port) &= ~(1<<index);
   \                     ??gpio_init_7:
   \   00000068   0x6942             LDR      R2,[R0, #+20]
   \   0000006A   0x2301             MOVS     R3,#+1
   \   0000006C   0xFA13 0xF101      LSLS     R1,R3,R1
   \   00000070   0xEA32 0x0101      BICS     R1,R2,R1
   \   00000074   0x6141             STR      R1,[R0, #+20]
     53          
     54          }
   \                     ??gpio_init_9:
   \   00000076   0xBC70             POP      {R4-R6}
   \   00000078   0x4770             BX       LR               ;; return
     55          
     56          //-------------------------------------------------------------------------* 
     57          //函数名: gpio_ctrl                                                        *
     58          //功  能: 设置引脚状态                                                     *
     59          //参  数: port:端口名                                                      *
     60          //        index:指定端口引脚                                               *
     61          //        data: 状态,0=低电平,1=高电平                                     *
     62          //返  回: 无                                                               *
     63          //说  明: 无                                                               *
     64          //-------------------------------------------------------------------------*

   \                                 In section .text, align 2, keep-with-next
     65          void gpio_ctrl (GPIO_MemMapPtr port, int index, int data)
     66          {
     67              if(data == 1)//output
   \                     gpio_ctrl:
   \   00000000   0x2A01             CMP      R2,#+1
   \   00000002   0xD106             BNE.N    ??gpio_ctrl_0
     68                   GPIO_PDOR_REG(port) |= (1<<index);
   \   00000004   0x6802             LDR      R2,[R0, #+0]
   \   00000006   0x2301             MOVS     R3,#+1
   \   00000008   0xFA13 0xF101      LSLS     R1,R3,R1
   \   0000000C   0x4311             ORRS     R1,R1,R2
   \   0000000E   0x6001             STR      R1,[R0, #+0]
   \   00000010   0xE006             B.N      ??gpio_ctrl_1
     69              else
     70                   GPIO_PDOR_REG(port) &= ~(1<<index);
   \                     ??gpio_ctrl_0:
   \   00000012   0x6802             LDR      R2,[R0, #+0]
   \   00000014   0x2301             MOVS     R3,#+1
   \   00000016   0xFA13 0xF101      LSLS     R1,R3,R1
   \   0000001A   0xEA32 0x0101      BICS     R1,R2,R1
   \   0000001E   0x6001             STR      R1,[R0, #+0]
     71          }
   \                     ??gpio_ctrl_1:
   \   00000020   0x4770             BX       LR               ;; return
     72          
     73          //-----------------------------------------------------------------------* 
     74          //函数名: gpio_reverse                                                   *
     75          //功  能: 改变引脚状态                                                   *
     76          //参  数: port:端口名;                                                   *
     77          //        index:指定端口引脚                                             *
     78          //返  回: 无                                                             *
     79          //说  明: 无                                                             *
     80          //-----------------------------------------------------------------------*

   \                                 In section .text, align 2, keep-with-next
     81          void gpio_reverse (GPIO_MemMapPtr port, int index)
     82          {
     83              GPIO_PDOR_REG(port) ^= (1<<index);
   \                     gpio_reverse:
   \   00000000   0x6802             LDR      R2,[R0, #+0]
   \   00000002   0x2301             MOVS     R3,#+1
   \   00000004   0xFA13 0xF101      LSLS     R1,R3,R1
   \   00000008   0x4051             EORS     R1,R1,R2
   \   0000000A   0x6001             STR      R1,[R0, #+0]
     84          }
   \   0000000C   0x4770             BX       LR               ;; return
     85          
     86          //-----------------------------------------------------------------------* 
     87          //函数名: gpio_read                                                      *
     88          //功  能: 检测输入引脚的状态                                             *
     89          //参  数: port:端口名;                                                   *
     90          //        index:指定端口引脚                                             *
     91          //返  回: 无                                                             *
     92          //说  明: 无                                                             *
     93          //-----------------------------------------------------------------------*

   \                                 In section .text, align 2, keep-with-next
     94          uint32 gpio_read(GPIO_MemMapPtr port,uint8 index)
     95          {
     96            uint32 a;
     97            uint8  b;
     98            a=GPIO_PDIR_REG(port);
   \                     gpio_read:
   \   00000000   0x6900             LDR      R0,[R0, #+16]
     99            b=(a&(1<<index))>>index;
   \   00000002   0x2201             MOVS     R2,#+1
   \   00000004   0x408A             LSLS     R2,R2,R1
   \   00000006   0x4010             ANDS     R0,R2,R0
   \   00000008   0x40C8             LSRS     R0,R0,R1
    100            return b;
   \   0000000A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000C   0x4770             BX       LR               ;; return
    101          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0:
   \   00000000   0x400FF000         DC32     0x400ff000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_1:
   \   00000000   0x40049000         DC32     0x40049000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_2:
   \   00000000   0x4004A000         DC32     0x4004a000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_3:
   \   00000000   0x4004B000         DC32     0x4004b000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_4:
   \   00000000   0x4004C000         DC32     0x4004c000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_5:
   \   00000000   0x4004D000         DC32     0x4004d000
    102          
    103          /*void hw_gpio_set(GPIO_MemMapPtr port, uint8 pin,uint8 state)
    104          {
    105             GPIO_MemMapPtr pt=hw_gpio_get_pt_addr(port);
    106             if(state==0)
    107               (GPIO_PDOR_REG(pt))&=~(1<<(pin));
    108             else
    109               (GPIO_PDOR_REG(pt))|=(1<<(pin));
    110          }
    111          
    112          uint8 hw_gpio_get(GPIO_MemMapPtr port,uint8 pin)
    113          {
    114            uint8 i;
    115            GPIO_MemMapPtr pt=hw_gpio_get_pt_addr(port);
    116            i=(((GPIO_PDOR_REG(pt))>>(pin))&1);
    117            return i;
    118          }
    119          
    120          GPIO_MemMapPtr hw_gpio_get_pt_addr(GPIO_MemMapPtr port)
    121          {
    122             GPIO_MemMapPtr p;
    123             switch(port)
    124             {
    125                case 0x400FF000u:
    126                   p = PORTA_BASE_PTR;
    127                   break;
    128               case 0x400FF040u:
    129                   p = PORTB_BASE_PTR;
    130                   break;
    131               case 0x400FF080u:
    132                   p = PORTC_BASE_PTR;
    133                   break;
    134               case 0x400FF0C0u:
    135                   p = PORTD_BASE_PTR;
    136                   break;
    137               case 0x400FF100u:
    138                   p = PORTE_BASE_PTR;
    139                   break;
    140               default:
    141                   break;
    142             }
    143             return p;
    144          }*/
    145          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        0  gpio_ctrl
       12  gpio_init
        0  gpio_read
        0  gpio_reverse


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable0
       4  ??DataTable0_1
       4  ??DataTable0_2
       4  ??DataTable0_3
       4  ??DataTable0_4
       4  ??DataTable0_5
      34  gpio_ctrl
     122  gpio_init
      14  gpio_read
      14  gpio_reverse

 
 208 bytes in section .text
 
 208 bytes of CODE memory

Errors: none
Warnings: none
